//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Dom Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.SlcServicemanagement
{
	using System;
	using System.Collections;
	using System.Linq;

	using Skyline.DataMiner.Net.Messages.SLDataGateway;
	using Skyline.DataMiner.ProjectApi.ServiceManagement.API.ServiceManagement;

	/// <summary>
	/// Exposer-metods for the <see cref="Models.ServiceConfigurationValue"/> instances.
	/// </summary>
	public static class ServiceConfigurationValueExposers
	{
		public static readonly Exposer<Models.ServiceConfigurationValue, Guid> Guid = new Exposer<Models.ServiceConfigurationValue, Guid>((obj) => obj.ID, String.Join(".", nameof(ServiceConfigurationValueExposers), nameof(Guid)));
		public static readonly Exposer<Models.ServiceConfigurationValue, Guid> ConfigurationParameterID = new Exposer<Models.ServiceConfigurationValue, Guid>((obj) => obj.ConfigurationParameter.ID, String.Join(".", nameof(ServiceConfigurationValueExposers), nameof(ConfigurationParameterID)));
	}

	/// <summary>
	/// Exposer-metods for the <see cref="Models.Service"/> instances.
	/// </summary>
	public static class ServiceExposers
	{
		public static readonly Exposer<Models.Service, Guid> Guid = new Exposer<Models.Service, Guid>((obj) => obj.ID, String.Join(".", nameof(ServiceExposers), nameof(Guid)));
		////public static readonly Exposer<ServicesInstance, DateTime> CreatedAt = new Exposer<ServicesInstance, DateTime>((obj) => obj.CreatedAt.GetValueOrDefault(), nameof(ServicesInstance.CreatedAt));
		////public static readonly Exposer<ServicesInstance, string> CreatedBy = new Exposer<ServicesInstance, string>((obj) => obj.CreatedBy, nameof(ServicesInstance.CreatedBy));
		////public static readonly Exposer<ServicesInstance, DateTime> LastModified = new Exposer<ServicesInstance, DateTime>((obj) => obj.LastModified.GetValueOrDefault(), nameof(ServicesInstance.LastModified));
		////public static readonly Exposer<ServicesInstance, string> LastModifiedBy = new Exposer<ServicesInstance, string>((obj) => obj.LastModifiedBy, nameof(ServicesInstance.LastModifiedBy));
		////private static Dictionary<System.Reflection.MemberInfo, FieldExposer> ExposerMap = new Dictionary<System.Reflection.MemberInfo, FieldExposer>(MemberComparer.Instance)
		////{
		////	{ typeof(Models.Service).GetProperty(nameof(Models.Service.ID)), ServicesInstanceExposers.Guid },
		////	////{ typeof(ServicesInstance).GetProperty(nameof(ServicesInstance.CreatedAt)), ServicesInstanceExposers.CreatedAt },
		////	////{ typeof(ServicesInstance).GetProperty(nameof(ServicesInstance.CreatedBy)), ServicesInstanceExposers.CreatedBy },
		////	////{ typeof(ServicesInstance).GetProperty(nameof(ServicesInstance.LastModified)), ServicesInstanceExposers.LastModified },
		////	////{ typeof(ServicesInstance).GetProperty(nameof(ServicesInstance.LastModifiedBy)), ServicesInstanceExposers.LastModifiedBy },
		////	{ typeof(ServiceInfoSection).GetProperty(nameof(ServiceInfoSection.ServiceName)), ServiceInfoSection.ServiceName },
		////	{ typeof(ServiceInfoSection).GetProperty(nameof(ServiceInfoSection.Description)), ServiceInfoSection.Description },
		////	{ typeof(ServiceInfoSection).GetProperty(nameof(ServiceInfoSection.ServiceStartTime)), ServiceInfoSection.ServiceStartTime },
		////	{ typeof(ServiceInfoSection).GetProperty(nameof(ServiceInfoSection.ServiceEndTime)), ServiceInfoSection.ServiceEndTime },
		////	{ typeof(ServiceInfoSection).GetProperty(nameof(ServiceInfoSection.Icon)), ServiceInfoSection.Icon },
		////	////{ typeof(ServiceInfoSection).GetProperty(nameof(ServiceInfoSection.ServiceSpecifcation)), ServiceInfoSection.ServiceSpecifcation },
		////	////{ typeof(ServiceInfoSection).GetProperty(nameof(ServiceInfoSection.ServiceProperties)), ServiceInfoSection.ServiceProperties },
		////	{ typeof(ServiceInfoSection).GetProperty(nameof(ServiceInfoSection.RelatedOrganization)), ServiceInfoSection.RelatedOrganization },
		////	{ typeof(ServiceInfoSection).GetProperty(nameof(ServiceInfoSection.ServiceCategory)), ServiceInfoSection.ServiceCategory },
		////	////{ typeof(ServiceInfoSection).GetProperty(nameof(ServiceInfoSection.ServiceConfigurationParameters)), ServiceInfoSection.ServiceConfigurationParameters },
		////	{ typeof(ServiceInfoSection).GetProperty(nameof(ServiceInfoSection.ServiceID)), ServiceInfoSection.ServiceID },
		////	{ typeof(SlcServicemanagement.ServiceItemsSection).GetProperty(nameof(SlcServicemanagement.ServiceItemsSection.Label)), ServiceItemsSection.Label },
		////	{ typeof(SlcServicemanagement.ServiceItemsSection).GetProperty(nameof(SlcServicemanagement.ServiceItemsSection.ServiceItemID)), ServiceItemsSection.ServiceItemID },
		////	{ typeof(SlcServicemanagement.ServiceItemsSection).GetProperty(nameof(SlcServicemanagement.ServiceItemsSection.ServiceItemType)), ServiceItemsSection.ServiceItemType },
		////	{ typeof(SlcServicemanagement.ServiceItemsSection).GetProperty(nameof(SlcServicemanagement.ServiceItemsSection.DefinitionReference)), ServiceItemsSection.DefinitionReference },
		////	{ typeof(SlcServicemanagement.ServiceItemsSection).GetProperty(nameof(SlcServicemanagement.ServiceItemsSection.ServiceItemScript)), ServiceItemsSection.ServiceItemScript },
		////	{ typeof(SlcServicemanagement.ServiceItemsSection).GetProperty(nameof(SlcServicemanagement.ServiceItemsSection.ImplementationReference)), ServiceItemsSection.ImplementationReference },
		////	{ typeof(ServiceItemRelationshipSection).GetProperty(nameof(ServiceItemRelationshipSection.Type)), ServiceItemRelationshipsSection.Type },
		////	{ typeof(ServiceItemRelationshipSection).GetProperty(nameof(ServiceItemRelationshipSection.ParentServiceItem)), ServiceItemRelationshipsSection.ParentServiceItem },
		////	{ typeof(ServiceItemRelationshipSection).GetProperty(nameof(ServiceItemRelationshipSection.ChildServiceItem)), ServiceItemRelationshipsSection.ChildServiceItem },
		////	{ typeof(ServiceItemRelationshipSection).GetProperty(nameof(ServiceItemRelationshipSection.ParentServiceItemInterfaceID)), ServiceItemRelationshipsSection.ParentServiceItemInterfaceID },
		////	{ typeof(ServiceItemRelationshipSection).GetProperty(nameof(ServiceItemRelationshipSection.ChildServiceItemInterfaceID)), ServiceItemRelationshipsSection.ChildServiceItemInterfaceID }
		////};
		////private static Dictionary<FieldExposer, Func<Skyline.DataMiner.Net.Messages.SLDataGateway.Comparer, object, FilterElement<Models.Service>>> FilterMap =
		////	new Dictionary<FieldExposer, Func<Skyline.DataMiner.Net.Messages.SLDataGateway.Comparer, object, FilterElement<Models.Service>>>
		////	{
		////		{ ServicesInstanceExposers.Guid, (comparer, value) => FilterElementFactory.Create(ServicesInstanceExposers.Guid, comparer, (Guid)value) },
		////		////{ ServicesInstanceExposers.CreatedAt, (comparer, value) => FilterElementFactory.Create(ServicesInstanceExposers.CreatedAt, comparer, (DateTime)value) },
		////		////{ ServicesInstanceExposers.CreatedBy, (comparer, value) => FilterElementFactory.Create(ServicesInstanceExposers.CreatedBy, comparer, (string)value) },
		////		////{ ServicesInstanceExposers.LastModified, (comparer, value) => FilterElementFactory.Create(ServicesInstanceExposers.LastModified, comparer, (DateTime)value) },
		////		////{ ServicesInstanceExposers.LastModifiedBy, (comparer, value) => FilterElementFactory.Create(ServicesInstanceExposers.LastModifiedBy, comparer, (string)value) },
		////		{ ServiceInfoSection.ServiceName, (comparer, value) => FilterElementFactory.Create(ServiceInfoSection.ServiceName, comparer, (string)value) },
		////		{ ServiceInfoSection.Description, (comparer, value) => FilterElementFactory.Create(ServiceInfoSection.Description, comparer, (string)value) },
		////		{ ServiceInfoSection.ServiceStartTime, (comparer, value) => FilterElementFactory.Create(ServiceInfoSection.ServiceStartTime, comparer, (DateTime?)value) },
		////		{ ServiceInfoSection.ServiceEndTime, (comparer, value) => FilterElementFactory.Create(ServiceInfoSection.ServiceEndTime, comparer, (DateTime?)value) },
		////		{ ServiceInfoSection.Icon, (comparer, value) => FilterElementFactory.Create(ServiceInfoSection.Icon, comparer, (string)value) },
		////		////{ ServiceInfoSection.ServiceSpecifcation, (comparer, value) => FilterElementFactory.Create( ServiceInfoSection.ServiceSpecifcation, comparer, (SdmObjectReference<DomHelpers.SlcServicemanagement.ServiceSpecificationsInstance>?)value) },
		////		////{ ServiceInfoSection.ServiceProperties, (comparer, value) => FilterElementFactory.Create( ServiceInfoSection.ServiceProperties, comparer, (SdmObjectReference<DomHelpers.SlcServicemanagement.ServicePropertiesInstance>?)value) },
		////		{ ServiceInfoSection.RelatedOrganization, (comparer, value) => FilterElementFactory.Create(ServiceInfoSection.RelatedOrganization, comparer, (Guid?)value) },
		////		{ ServiceInfoSection.ServiceCategory, (comparer, value) => FilterElementFactory.Create(ServiceInfoSection.ServiceCategory, comparer, (Guid)value) },
		////		////{ ServiceInfoSection.ServiceConfigurationParameters, (comparer, value) => FilterElementFactory.Create( ServiceInfoSection.ServiceConfigurationParameters, comparer, (SdmObjectReference<DomHelpers.SlcServicemanagement.ServiceConfigurationValueInstance>)value) },
		////		{ ServiceInfoSection.ServiceID, (comparer, value) => FilterElementFactory.Create(ServiceInfoSection.ServiceID, comparer, (string)value) },
		////		{ ServiceItemsSection.Label, (comparer, value) => FilterElementFactory.Create(ServiceItemsSection.Label, comparer, (string)value) },
		////		{ ServiceItemsSection.ServiceItemID, (comparer, value) => FilterElementFactory.Create(ServiceItemsSection.ServiceItemID, comparer, (long)value) },
		////		{ ServiceItemsSection.ServiceItemType, (comparer, value) => FilterElementFactory.Create(ServiceItemsSection.ServiceItemType, comparer, (SlcServicemanagementIds.Enums.ServiceitemtypesEnum)value) },
		////		{ ServiceItemsSection.DefinitionReference, (comparer, value) => FilterElementFactory.Create(ServiceItemsSection.DefinitionReference, comparer, (string)value) },
		////		{ ServiceItemsSection.ServiceItemScript, (comparer, value) => FilterElementFactory.Create(ServiceItemsSection.ServiceItemScript, comparer, (string)value) },
		////		{ ServiceItemsSection.ImplementationReference, (comparer, value) => FilterElementFactory.Create(ServiceItemsSection.ImplementationReference, comparer, (string)value) },
		////		{ ServiceItemRelationshipsSection.Type, (comparer, value) => FilterElementFactory.Create(ServiceItemRelationshipsSection.Type, comparer, (string)value) },
		////		{ ServiceItemRelationshipsSection.ParentServiceItem, (comparer, value) => FilterElementFactory.Create(ServiceItemRelationshipsSection.ParentServiceItem, comparer, (string)value) },
		////		{ ServiceItemRelationshipsSection.ChildServiceItem, (comparer, value) => FilterElementFactory.Create(ServiceItemRelationshipsSection.ChildServiceItem, comparer, (string)value) },
		////		{ ServiceItemRelationshipsSection.ParentServiceItemInterfaceID, (comparer, value) => FilterElementFactory.Create(ServiceItemRelationshipsSection.ParentServiceItemInterfaceID, comparer, (string)value) },
		////		{ ServiceItemRelationshipsSection.ChildServiceItemInterfaceID, (comparer, value) => FilterElementFactory.Create(ServiceItemRelationshipsSection.ChildServiceItemInterfaceID, comparer, (string)value) }
		////	};
		////public static FilterElement<Models.Service> CreateFilter(System.Reflection.MemberInfo member, Skyline.DataMiner.Net.Messages.SLDataGateway.Comparer comparer, object value)
		////{
		////	if (ExposerMap.TryGetValue(member, out var fieldExposer) && FilterMap.TryGetValue(fieldExposer, out var create))
		////	{
		////		return create(comparer, value);
		////	}

		////	return null;
		////}

		////public static IOrderByElement CreateOrderBy(System.Reflection.MemberInfo member, SLDataGateway.API.Types.Querying.SortOrder sortOrder, bool naturalSort = false)
		////{
		////	if (ExposerMap.TryGetValue(member, out var fieldExposer))
		////	{
		////		return OrderByElement.Default.WithFieldExposer(fieldExposer).WithSortOrder(sortOrder).WithNaturalSort(naturalSort);
		////	}

		////	return null;
		////}

		public static readonly Exposer<Models.Service, string> ServiceName = new Exposer<Models.Service, string>((obj) => obj.Name, String.Join(".", nameof(ServiceExposers), nameof(ServiceName)));
		public static readonly Exposer<Models.Service, string> Description = new Exposer<Models.Service, string>((obj) => obj.Description, String.Join(".", nameof(ServiceExposers), nameof(Description)));
		public static readonly Exposer<Models.Service, DateTime?> ServiceStartTime = new Exposer<Models.Service, DateTime?>((obj) => obj.StartTime, String.Join(".", nameof(ServiceExposers), nameof(ServiceStartTime)));
		public static readonly Exposer<Models.Service, DateTime?> ServiceEndTime = new Exposer<Models.Service, DateTime?>((obj) => obj.EndTime, String.Join(".", nameof(ServiceExposers), nameof(ServiceEndTime)));
		public static readonly Exposer<Models.Service, string> Icon = new Exposer<Models.Service, string>((obj) => obj.Icon, String.Join(".", nameof(ServiceExposers), nameof(Icon)));
		//public static readonly Exposer<Models.Service, SdmObjectReference<DomHelpers.SlcServicemanagement.ServiceSpecificationsInstance>?> ServiceSpecifcation = new Exposer<ServicesInstance, SdmObjectReference<DomHelpers.SlcServicemanagement.ServiceSpecificationsInstance>?>((obj) => obj.ServiceInfo.ServiceSpecifcation, String.Join(".", nameof(ServiceExposers), nameof(ServiceSpecifcation)));
		//public static readonly Exposer<Models.Service, SdmObjectReference<DomHelpers.SlcServicemanagement.ServicePropertiesInstance>?> ServiceProperties = new Exposer<ServicesInstance, SdmObjectReference<DomHelpers.SlcServicemanagement.ServicePropertiesInstance>?>((obj) => obj.ServiceInfo.ServiceProperties, String.Join(".", nameof(ServiceExposers), nameof(ServiceProperties)));
		public static readonly Exposer<Models.Service, Guid?> RelatedOrganization = new Exposer<Models.Service, Guid?>((obj) => obj.OrganizationId, String.Join(".", nameof(ServiceExposers), nameof(RelatedOrganization)));
		public static readonly Exposer<Models.Service, Models.ServiceCategory> ServiceCategory = new Exposer<Models.Service, Models.ServiceCategory>((obj) => obj.Category, String.Join(".", nameof(ServiceExposers), nameof(ServiceCategory)));
		public static readonly DynamicListExposer<Models.Service, Models.ServiceConfigurationValue> ServiceConfigurationParameters = DynamicListExposer<Models.Service, Models.ServiceConfigurationValue>.CreateFromListExposer(new Exposer<Models.Service, IEnumerable>((obj) => obj.Configurations, String.Join(".", nameof(ServiceExposers), nameof(ServiceConfigurationParameters))));
		public static readonly Exposer<Models.Service, string> ServiceID = new Exposer<Models.Service, string>((obj) => obj.ServiceID, String.Join(".", nameof(ServiceExposers), nameof(ServiceID)));

		public static class ServiceItemsSection
		{
			public static readonly DynamicListExposer<Models.Service, string> Label = DynamicListExposer<Models.Service, string>.CreateFromListExposer(new Exposer<Models.Service, IEnumerable>((obj) => obj.ServiceItems.Select(x => x.Label).Where(x => x != null), String.Join(".", nameof(SlcServicemanagement.ServiceItemsSection), nameof(Label))));
			public static readonly DynamicListExposer<Models.Service, long> ServiceItemID = DynamicListExposer<Models.Service, long>.CreateFromListExposer(new Exposer<Models.Service, IEnumerable>((obj) => obj.ServiceItems.Select(x => x.ID).Where(x => x != null), String.Join(".", nameof(SlcServicemanagement.ServiceItemsSection), nameof(ServiceItemID))));
			public static readonly DynamicListExposer<Models.Service, SlcServicemanagementIds.Enums.ServiceitemtypesEnum> ServiceItemType = DynamicListExposer<Models.Service, SlcServicemanagementIds.Enums.ServiceitemtypesEnum>.CreateFromListExposer(new Exposer<Models.Service, IEnumerable>((obj) => obj.ServiceItems.Select(x => x.Type).Where(x => x != null), String.Join(".", nameof(SlcServicemanagement.ServiceItemsSection), nameof(ServiceItemType))));
			public static readonly DynamicListExposer<Models.Service, string> DefinitionReference = DynamicListExposer<Models.Service, string>.CreateFromListExposer(new Exposer<Models.Service, IEnumerable>((obj) => obj.ServiceItems.Select(x => x.DefinitionReference).Where(x => x != null), String.Join(".", nameof(SlcServicemanagement.ServiceItemsSection), nameof(DefinitionReference))));
			public static readonly DynamicListExposer<Models.Service, string> ServiceItemScript = DynamicListExposer<Models.Service, string>.CreateFromListExposer(new Exposer<Models.Service, IEnumerable>((obj) => obj.ServiceItems.Select(x => x.Script).Where(x => x != null), String.Join(".", nameof(SlcServicemanagement.ServiceItemsSection), nameof(ServiceItemScript))));
			public static readonly DynamicListExposer<Models.Service, string> ImplementationReference = DynamicListExposer<Models.Service, string>.CreateFromListExposer(new Exposer<Models.Service, IEnumerable>((obj) => obj.ServiceItems.Select(x => x.ImplementationReference).Where(x => x != null), String.Join(".", nameof(SlcServicemanagement.ServiceItemsSection), nameof(ImplementationReference))));
		}

		public static class ServiceItemRelationshipsSection
		{
			public static readonly DynamicListExposer<Models.Service, string> Type = DynamicListExposer<Models.Service, string>.CreateFromListExposer(new Exposer<Models.Service, IEnumerable>((obj) => obj.ServiceItemsRelationships.Select(x => x.Type).Where(x => x != null), String.Join(".", nameof(ServiceItemRelationshipSection), nameof(Type))));
			public static readonly DynamicListExposer<Models.Service, string> ParentServiceItem = DynamicListExposer<Models.Service, string>.CreateFromListExposer(new Exposer<Models.Service, IEnumerable>((obj) => obj.ServiceItemsRelationships.Select(x => x.ParentServiceItem).Where(x => x != null), String.Join(".", nameof(ServiceItemRelationshipSection), nameof(ParentServiceItem))));
			public static readonly DynamicListExposer<Models.Service, string> ChildServiceItem = DynamicListExposer<Models.Service, string>.CreateFromListExposer(new Exposer<Models.Service, IEnumerable>((obj) => obj.ServiceItemsRelationships.Select(x => x.ChildServiceItem).Where(x => x != null), String.Join(".", nameof(ServiceItemRelationshipSection), nameof(ChildServiceItem))));
			public static readonly DynamicListExposer<Models.Service, string> ParentServiceItemInterfaceID = DynamicListExposer<Models.Service, string>.CreateFromListExposer(new Exposer<Models.Service, IEnumerable>((obj) => obj.ServiceItemsRelationships.Select(x => x.ParentServiceItem).Where(x => x != null), String.Join(".", nameof(ServiceItemRelationshipSection), nameof(ParentServiceItemInterfaceID))));
			public static readonly DynamicListExposer<Models.Service, string> ChildServiceItemInterfaceID = DynamicListExposer<Models.Service, string>.CreateFromListExposer(new Exposer<Models.Service, IEnumerable>((obj) => obj.ServiceItemsRelationships.Select(x => x.ParentServiceItemInterfaceId).Where(x => x != null), String.Join(".", nameof(ServiceItemRelationshipSection), nameof(ChildServiceItemInterfaceID))));
		}
	}
}