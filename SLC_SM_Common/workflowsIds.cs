//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Dom Editor automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.SlcWorkflow
{
    using System;
    using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
    using Skyline.DataMiner.Net.Sections;

    public static class SlcWorkflowIds
    {
        public const string ModuleId = "(slc)workflow";
        public static class Enums
        {
            public static class Qtytype
            {
                public const string Min = "min";
                public const string Hour = "hour";
                public const string Day = "day";
                public const string PerUse = "use";
                public static string ToValue(QtytypeEnum @enum)
                {
                    switch (@enum)
                    {
                        case QtytypeEnum.Min:
                            return Min;
                        case QtytypeEnum.Hour:
                            return Hour;
                        case QtytypeEnum.Day:
                            return Day;
                        case QtytypeEnum.PerUse:
                            return PerUse;
                        default:
                            throw new ArgumentOutOfRangeException(nameof(@enum), @enum, "Invalid value.");
                    }
                }

                public static QtytypeEnum ToEnum(string s)
                {
                    switch (s)
                    {
                        case Min:
                            return QtytypeEnum.Min;
                        case Hour:
                            return QtytypeEnum.Hour;
                        case Day:
                            return QtytypeEnum.Day;
                        case PerUse:
                            return QtytypeEnum.PerUse;
                        default:
                            throw new ArgumentOutOfRangeException(nameof(s), s, "Invalid value.");
                    }
                }
            }

            public enum QtytypeEnum
            {
                Min,
                Hour,
                Day,
                PerUse
            }

            public enum Priority
            {
                High = 1,
                Normal = 2,
                Low = 3
            }

            public enum Jobconfigurationstatus
            {
                NoValuesNeeded = 0,
                MandatoryValuesMissing = 1,
                NonMandatoryValuesMissing = 2,
                AllValuesProvided = 3
            }

            public enum Jobdomstate
            {
                Draft = 0,
                Tentative = 1,
                Confirmed = 2,
                Running = 3,
                Completed = 4,
                ReadyForInvoice = 5,
                Canceled = 6,
                Error = 7
            }

            public static class Lineitemtype
            {
                public const string Costing = "costing";
                public const string Billing = "billing";
                public static string ToValue(LineitemtypeEnum @enum)
                {
                    switch (@enum)
                    {
                        case LineitemtypeEnum.Costing:
                            return Costing;
                        case LineitemtypeEnum.Billing:
                            return Billing;
                        default:
                            throw new ArgumentOutOfRangeException(nameof(@enum), @enum, "Invalid value.");
                    }
                }

                public static LineitemtypeEnum ToEnum(string s)
                {
                    switch (s)
                    {
                        case Costing:
                            return LineitemtypeEnum.Costing;
                        case Billing:
                            return LineitemtypeEnum.Billing;
                        default:
                            throw new ArgumentOutOfRangeException(nameof(s), s, "Invalid value.");
                    }
                }
            }

            public enum LineitemtypeEnum
            {
                Costing,
                Billing
            }

            public static class Objecttype
            {
                public const string Node = "node";
                public const string Workflow = "workflow";
                public static string ToValue(ObjecttypeEnum @enum)
                {
                    switch (@enum)
                    {
                        case ObjecttypeEnum.Node:
                            return Node;
                        case ObjecttypeEnum.Workflow:
                            return Workflow;
                        default:
                            throw new ArgumentOutOfRangeException(nameof(@enum), @enum, "Invalid value.");
                    }
                }

                public static ObjecttypeEnum ToEnum(string s)
                {
                    switch (s)
                    {
                        case Node:
                            return ObjecttypeEnum.Node;
                        case Workflow:
                            return ObjecttypeEnum.Workflow;
                        default:
                            throw new ArgumentOutOfRangeException(nameof(s), s, "Invalid value.");
                    }
                }
            }

            public enum ObjecttypeEnum
            {
                Node,
                Workflow
            }

            public enum Filtertype
            {
                Capability = 0,
                Capacity = 1,
                Domain = 2
            }

            public enum Replaceaction
            {
                SingleNode = 0,
                AllNodes = 1
            }

            public enum Atjobstart
            {
                CreateServiceImmediately = 0,
                CreateServiceAtWorkflowStart = 1,
                DonTCreateService = 2
            }

            public enum Atjobend
            {
                DeleteServiceIfOneExists = 0,
                DonTDeleteService = 1
            }

            public enum Jobpriority
            {
                High = 0,
                Normal = 1,
                Low = 2
            }

            public enum Actionstatus
            {
                NeedsResourceSelections = 0,
                AllResourcesSelected = 1
            }

            public enum Bookingaction
            {
                AllOrNothing = 0,
                BestEffort = 1
            }

            public enum Deleteaction
            {
                SingleNode = 0,
                AllNodes = 1
            }

            public enum Connectiontype
            {
                LevelBased = 0,
                TagBased = 1
            }

            public enum Connectionsubtype
            {
                All = 0,
                PredefinedSubset = 1,
                CustomSubset = 2,
                Shuffle = 3
            }

            public enum Predefinedsubset
            {
                VAD = 0,
                V = 1,
                A = 2,
                D = 3,
                VA = 4,
                VD = 5,
                AD = 6
            }

            public enum Type
            {
                Daily = 0,
                Weekly = 1,
                Monthly = 2
            }

            public enum Nodetype
            {
                Source = 0,
                SourceType = 1,
                Resource = 2,
                ResourcePool = 3,
                Destination = 4,
                DestinationType = 5,
                SourceInstance = 6,
                DestinationInstance = 7
            }

            public enum Resourceselectmode
            {
                Manual = 0,
                AutoSelectAtBooking = 1,
                AutoSelectAtRuntime = 2
            }

            public enum Resourceselectstate
            {
                Selected = 0,
                PendingAutoSelection = 1,
                PendingManualSelection = 2,
                RequestedResource = 3,
                Error = 4
            }

            public enum Nodeconfigurationstatus
            {
                NoValuesNeeded = 0,
                MandatoryValuesMissing = 1,
                NonMandatoryValuesMissing = 2,
                AllValuesProvided = 3
            }
        }

        public static class Sections
        {
            public static class Rate
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("b41107d1-0e7f-4089-8162-990d47377d4c"))
                {ModuleId = "(slc)workflow"};
                public static FieldDescriptorID Qty
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("8445ad52-138c-4edf-873f-0d2a3d92ac15"));
                public static FieldDescriptorID QtyType
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("b5e7fb30-24c7-42a8-85d5-b6058932ab67"));
                public static FieldDescriptorID AmountPerUnit
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("81bb7ed4-069f-4947-8da3-622dcffa9dac"));
                public static FieldDescriptorID TotalAmount
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("54c2a8c3-b6ac-45f1-ace0-d2263585659e"));
                public static FieldDescriptorID TotalNetAmount
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("2282e9f8-0461-4a79-a62d-901c93714183"));
            }

            public static class SessionDataStore
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("3c203118-c2ae-42ad-9f95-808fd988dabb"))
                {ModuleId = "(slc)workflow"};
                public static FieldDescriptorID JobId
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("f3b60386-20cd-41da-953a-4a8ace65ad43"));
            }

            public static class SessionDataUser
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("45c92fe1-0b64-47dc-b76b-5a9fb5329fb1"))
                {ModuleId = "(slc)workflow"};
                public static FieldDescriptorID User
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("5ea43113-88eb-4a05-8046-b9ad27b5f198"));
            }

            public static class NodeRelationships
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("b8ccf030-5d0c-42ac-8a00-06f430bbedf2"))
                {ModuleId = "(slc)workflow"};
                public static FieldDescriptorID ParentNodeID
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("b68b3aa5-6449-497c-b2ad-77d31522544f"));
                public static FieldDescriptorID ChildNodeID
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("e8cca1c7-084d-45ca-b10b-1713279aa0c1"));
                public static FieldDescriptorID RelationshipType
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("b917c90a-a5b8-4365-85f0-7ce61e586119"));
            }

            public static class WorkflowInfo
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("22f75d97-9bf3-4d90-b769-f48c0fce025f"))
                {ModuleId = "(slc)workflow"};
                public static FieldDescriptorID WorkflowName
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("db431b11-822a-4043-bed3-faaf362f9636"));
                public static FieldDescriptorID WorkflowDescription
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("7004da70-ce94-40aa-b531-7efa3aad577b"));
                public static FieldDescriptorID Favorite
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("3dc1bee6-1cc6-415f-8d96-71020fec578f"));
                public static FieldDescriptorID Priority
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("86f34b26-a731-4251-8bcb-e1990bfbabdd"));
            }

            public static class JobError
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("ce3753c7-3424-4fc7-86be-26ae1e53e034"))
                {ModuleId = "(slc)workflow"};
                public static FieldDescriptorID ErrorType
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("7aaa7965-e307-40b1-93e3-4fc32a4b2c90"));
                public static FieldDescriptorID StateAtError
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("f924ed2a-fdc9-499f-8d49-72872c0353d5"));
                public static FieldDescriptorID ErrorMessage
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("6e4c46f4-93a5-44c1-94dc-0b9405a1d619"));
            }

            public static class ProfileParameterValues
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("86ffc829-5846-4737-b5fd-a2411c8bb884"))
                {ModuleId = "(slc)workflow"};
                public static FieldDescriptorID ProfileParameterID
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("2419f53b-ade1-4fce-8029-905cc5b14cea"));
                public static FieldDescriptorID StringValue
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("c7a8923e-2882-4c94-87c7-d44a05cc906a"));
                public static FieldDescriptorID DoubleValue
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("caa80a42-1956-4d97-be3a-b7828267d035"));
                public static FieldDescriptorID ReferenceID
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("60badcf5-0ec0-4b01-83f0-7c78cc7b0867"));
            }

            public static class CostingAndBilling
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("bce8a3ba-4f5d-4a8b-840f-dfb5940b8d4c"))
                {ModuleId = "(slc)workflow"};
                public static FieldDescriptorID Organization
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("b4280765-96fe-400a-99a9-e430e9b3d99a"));
                public static FieldDescriptorID JobOwner
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("818f79f7-7df3-4ae4-b39e-4fa90b732cf4"));
                public static FieldDescriptorID AdditionalContacts
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("b081fecc-518c-4e29-be4b-c3b3fba6509c"));
                public static FieldDescriptorID Contract
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("d183ca7d-b735-4508-8dcb-1522a2134ea1"));
                public static FieldDescriptorID JobStatus
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("d249324d-5ab5-4253-9490-7c9bf7d0da0a"));
                public static FieldDescriptorID ContractUplift
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("9b2e77b8-7c27-4c06-b522-b2080f32a215"));
                public static FieldDescriptorID ContractDiscount
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("365a821e-a837-486b-a6e9-7bd0485b3f60"));
                public static FieldDescriptorID SpeedOrderIncrementOnTopOfBillingPrice
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("0c6dc91c-2771-443d-9c56-eeeecb267beb"));
                public static FieldDescriptorID SpeedOrderFixedFee
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("8b40e49f-8ba1-47f2-b549-d33517139627"));
                public static FieldDescriptorID CancellationOfBillingPrice
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("3b175dae-ec7a-47db-85b5-1d07940de9b3"));
                public static FieldDescriptorID CancellationFixedFee
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("ce2921ab-3744-4733-b3fa-c25e2ddda82d"));
                public static FieldDescriptorID LastBillCalculation
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("f721e551-5139-479f-9ed7-717c3313384f"));
                public static FieldDescriptorID TotalBillNetAmount
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("27624e6a-faee-4416-aaf4-c8440ef8f956"));
                public static FieldDescriptorID TotalBillNetOverrideAmount
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("5d24ed13-5be4-4d41-9d43-f33573e9f645"));
                public static FieldDescriptorID BillCurrency
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("47f0e303-d85e-4cd3-8d3b-896245e49ec8"));
            }

            public static class JobExecution
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("43a36804-3409-4498-8620-eaec80238fcc"))
                {ModuleId = "(slc)workflow"};
                public static FieldDescriptorID JobExecutionScript
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("4a9bf831-b5cd-4cb1-a25b-f1967a2e177c"));
                public static FieldDescriptorID JobConfiguration
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("7f98a626-bce5-4c78-8ced-387f75f27914"));
                public static FieldDescriptorID JobConfigurationStatus
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("21e962f1-6cce-4e73-8088-3ae37a1922c3"));
            }

            public static class MCR_Timestepper_Currentrange
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("fa32bbff-809b-4042-90c0-8229c89587bf"))
                {ModuleId = "(slc)workflow"};
                public static FieldDescriptorID User
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("cbb8da70-2156-4422-8bec-6d92ff136ceb"));
                public static FieldDescriptorID End
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("eafb4c99-6941-4c6b-900d-7851ff2dca99"));
                public static FieldDescriptorID Start
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("22040507-2e30-44c2-a8ea-c6a3723af2bc"));
                public static FieldDescriptorID Lastset
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("8fbb5b0b-2b38-4b43-8e2c-b0690a738d58"));
            }

            public static class ConfigurationInfo
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("e099a23f-e789-4896-b024-8c76c0a7faf1"))
                {ModuleId = "(slc)workflow"};
                public static FieldDescriptorID ProfileDefinitionID
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("f75d613a-2e00-42a9-9c41-d726ad5f050b"));
                public static FieldDescriptorID PresetID
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("bdc44b0c-afa6-4583-b817-25341e175b50"));
            }

            public static class JobStates
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("8d0ab621-5afa-47bf-8126-1c6d34b8dc32"))
                {ModuleId = "(slc)workflow"};
                public static FieldDescriptorID JobState
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("b1a81714-c8a9-4880-b1e3-c5400617332c"));
                public static FieldDescriptorID JobDOMState
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("23e939b3-9222-4c07-9bc4-79e6b1a5dbf8"));
                public static FieldDescriptorID Default
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("cd280272-8ef7-4545-bc6d-80126085988a"));
                public static FieldDescriptorID Active
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("be0a7943-baf3-4c58-8c50-b249e8f22498"));
            }

            public static class CostingAndBillingDetails
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("28a99ebf-efd3-4046-9592-35e448f54e6a"))
                {ModuleId = "(slc)workflow"};
                public static FieldDescriptorID LineItemType
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("7552a3e0-edb8-4a84-8a37-16e987116d41"));
                public static FieldDescriptorID ObjectType
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("ccfd1aa0-3574-49d0-ac2d-e29e89697ad1"));
                public static FieldDescriptorID ObjectID
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("d3229cac-d373-4bb7-a501-3b68176e07a9"));
                public static FieldDescriptorID Description
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("ba982271-d1f5-4827-a1f1-7a573961138b"));
                public static FieldDescriptorID RateCard
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("3b33582c-5c57-4a0b-8567-89abe034920f"));
                public static FieldDescriptorID TotalNetOverrideAmount
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("9d1c4c09-5b73-4d34-bd0f-0cf393135d00"));
                public static FieldDescriptorID Currency
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("7deef271-9ccc-4ba9-9fcc-af8ce899dd65"));
                public static FieldDescriptorID Rates
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("f0ce49a3-a023-45e0-9787-0875fab7d3c2"));
            }

            public static class SessionFilter
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("17b3fc7e-089d-4855-b7fe-07df846fa933"))
                {ModuleId = "(slc)workflow"};
                public static FieldDescriptorID FilterType
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("acb54b31-a34c-4861-980e-5ef6d6094df8"));
                public static FieldDescriptorID FilterKey
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("c77a5add-1607-484b-941c-c53531a87d27"));
                public static FieldDescriptorID FilterValues
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("e9fed5ae-2702-42f2-962b-48bb5280b4df"));
            }

            public static class WorkflowExecution
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("f81c94fc-a43d-4f77-9e3d-d9a34dc9cf27"))
                {ModuleId = "(slc)workflow"};
                public static FieldDescriptorID WorkflowExecutionScript
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("3b7d81b5-d5a6-47cf-a872-ca4e1259923c"));
                public static FieldDescriptorID WorkflowConfiguration
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("4cd751d1-db58-448d-81d5-0f41b43000dd"));
            }

            public static class JobNodeRelationshipReplaceActions
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("76908a6e-09bc-490a-ba34-2e7e23acd450"))
                {ModuleId = "(slc)workflow"};
                public static FieldDescriptorID ReplaceAction
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("f6f3ab33-99c7-4d8f-81ce-f59c2e713f34"));
                public static FieldDescriptorID ExecutePoolLinks
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("1bbee8e3-6eed-45ae-90a6-c7685df3c7dc"));
                public static FieldDescriptorID ExecuteBookingExtensionScript
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("c4d0bafa-3001-4d43-a18d-8e8d9f1a6019"));
            }

            public static class Errors
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("fd2df49f-05a5-4bc8-9072-2e19dd88d145"))
                {ModuleId = "(slc)workflow"};
                public static FieldDescriptorID ErrorCode
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("1155114c-b19e-4c26-a3e4-ffba40630388"));
                public static FieldDescriptorID ErrorMessage
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("8821968b-14ba-4aa3-a85f-f0660012a943"));
            }

            public static class MonitoringSettings
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("74d2d947-36be-41f0-babd-9a5b986d928b"))
                {ModuleId = "(slc)workflow"};
                public static FieldDescriptorID AtJobStart
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("b9a62e46-492a-4eba-a1ce-5218ce306989"));
                public static FieldDescriptorID AtJobEnd
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("aa1d9ed8-33f4-437a-9a7b-0d993d5ebb22"));
                public static FieldDescriptorID MonitoringServiceTemplate
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("234e3e79-b84a-4a74-8751-0ca1f14a9dbd"));
                public static FieldDescriptorID MonitoringServiceID
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("e67d43c5-5efc-4254-b837-049d45cb548e"));
            }

            public static class JobInfo
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("dd1d3774-c681-47d3-950a-3783e3533bf9"))
                {ModuleId = "(slc)workflow"};
                public static FieldDescriptorID JobID
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("a717a4c3-c374-4b24-8f33-feee73208955"));
                public static FieldDescriptorID JobName
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("d9084944-9dcc-43c1-8783-2e22626feb9e"));
                public static FieldDescriptorID JobDescription
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("2fc4d087-2776-48d6-a990-373ab4b05c1b"));
                public static FieldDescriptorID Workflow
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("9d608393-c7f2-4f45-9857-8b18c5f42a47"));
                public static FieldDescriptorID JobStatus
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("c2963641-1628-467a-8e37-fe365f8e05f3"));
                public static FieldDescriptorID JobStart
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("eabadf08-89e9-499a-b119-07d76c544a90"));
                public static FieldDescriptorID JobEnd
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("0d978e1c-dbba-4592-a9b2-32ed65fc7603"));
                public static FieldDescriptorID ApproxOutDuration
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("79a7943e-5adf-44fa-9984-9f16622ebbb3"));
                public static FieldDescriptorID ApproxOutTime
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("ea1f069f-7fe7-4ce2-91d3-aca94051f74b"));
                public static FieldDescriptorID JobPriority
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("7775cd7c-0b56-4878-ad35-a7757d436a32"));
                public static FieldDescriptorID Recurrence
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("227aa1d2-ee14-4ba9-ab9c-ed9a689def87"));
                public static FieldDescriptorID JobSource
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("9cae3907-45ba-4ef7-8c42-559b7c2e6ad3"));
                public static FieldDescriptorID JobNotes
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("cfac4a80-00b7-4531-9a3b-8ec34b84afbf"));
                public static FieldDescriptorID OriginalJobStart
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("fe9e1f6d-7083-4ada-8895-7f0620c10f54"));
                public static FieldDescriptorID OriginalJobEnd
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("7f1cf5f7-4aed-47f5-901d-4f5c2fc991bc"));
                public static FieldDescriptorID JobConfirmation
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("0090948e-4609-4281-ba3c-14945652629b"));
                public static FieldDescriptorID JobCancellation
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("7ec04ba8-a457-4390-b756-3d1afb8e9c71"));
                public static FieldDescriptorID ActionStatus
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("d9f7a69f-b762-4784-8d69-b186363bedf3"));
                public static FieldDescriptorID LockedBy
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("841be21d-4de0-46d0-8a97-ff57dbfa87a0"));
            }

            public static class JobNodeRelationshipGeneralActions
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("bd8f007f-fc61-47e5-83f8-0e708217db29"))
                {ModuleId = "(slc)workflow"};
                public static FieldDescriptorID Relationship
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("c0a2e656-bb1f-4345-8c8d-347a15e39b2e"));
                public static FieldDescriptorID BookingAction
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("059c2b6a-0739-4db1-ade4-bf9ad2d0a9e9"));
                public static FieldDescriptorID DeleteAction
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("c09c90cc-725f-42d5-8a09-4a9a15cbeaa0"));
            }

            public static class Connections
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("8e46264a-8100-49a1-bcef-076490b25da1"))
                {ModuleId = "(slc)workflow"};
                public static FieldDescriptorID ConnectionID
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("8ce0d61a-1976-4fea-9d9f-450649b209b0"));
                public static FieldDescriptorID SourceNodeID
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("2b6d7fc8-c8c4-4667-b4e9-c5f1dfb63e1c"));
                public static FieldDescriptorID DestinationNodeID
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("920b7393-c581-421b-8d51-9915d3c294bd"));
                public static FieldDescriptorID ConnectionAlias
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("f043e11d-eef7-4abf-bf03-e50c43d0864b"));
                public static FieldDescriptorID ConnectionExecutionOrder
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("45abe861-4984-4954-a87d-17c49214370b"));
                public static FieldDescriptorID ConnectionType
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("78177b0b-b65b-4327-83bb-da85488b8aa0"));
                public static FieldDescriptorID ConnectionSubtype
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("341234dd-7e0c-4df7-ade5-92f075581acb"));
                public static FieldDescriptorID PredefinedSubset
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("30e61037-d74a-4c3d-8795-aec859117fba"));
                public static FieldDescriptorID ConnectionDetails
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("a1e15aae-7540-4d1c-9d22-c5a3c7861e28"));
                public static FieldDescriptorID ConnectionExecutionScript
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("9e0cee09-3a32-42f2-be30-cf52df76f833"));
            }

            public static class JobSettings
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("19f2d7c6-ed16-4e05-bd02-78016a4c8a9d"))
                {ModuleId = "(slc)workflow"};
                public static FieldDescriptorID JobIDPrefix
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("800227f3-e4c7-48ea-b3ec-98b2a40f8982"));
                public static FieldDescriptorID JobIDMinimumDigits
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("b8ee8619-f64e-4c71-8c36-3a0692b6456e"));
                public static FieldDescriptorID JobIDStartingSeed
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("9778566b-422f-4908-a05f-e56a93037779"));
                public static FieldDescriptorID JobIDIncrement
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("1a55336d-d207-48ed-9c56-3d43219f8f7b"));
                public static FieldDescriptorID JobIDNextSequence
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("3e07caec-bb58-4870-997c-42f0bcd7bc63"));
            }

            public static class RecurrenceDetails
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("e0988c95-772d-4ccb-8699-6be195d66db1"))
                {ModuleId = "(slc)workflow"};
                public static FieldDescriptorID StartTime
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("3866305f-a1dc-43d3-9185-4ca90c133a31"));
                public static FieldDescriptorID EndTime
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("ca32dd69-9023-40f3-9166-b411d9d858e4"));
                public static FieldDescriptorID Type
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("4ca506cb-3ad0-4f86-856d-f76d934c08ab"));
            }

            public static class Nodes
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("717f9a98-a705-4740-86ec-05204ef6dd28"))
                {ModuleId = "(slc)workflow"};
                public static FieldDescriptorID NodeID
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("ef8bb4aa-095e-47e0-9d88-b994b5309a18"));
                public static FieldDescriptorID NodeAlias
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("a330c5a1-df84-4044-94eb-f1d6b96bdac0"));
                public static FieldDescriptorID NodeType
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("abb6aadf-b315-4722-bc0e-859f6c3feae2"));
                public static FieldDescriptorID NodeReferenceID
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("fbbd7129-e818-4c73-9cc2-e6db158bf89f"));
                public static FieldDescriptorID NodeParentReferenceID
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("17d00bc5-e562-4221-8aba-fd3c4be7d31d"));
                public static FieldDescriptorID NodeIcon
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("3d3656ab-a46f-49f8-a584-7a5d7ecb33f4"));
                public static FieldDescriptorID AutomaticConfiguration
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("bb98266a-ab15-4694-9320-6f0d315f1d2c"));
                public static FieldDescriptorID ConfigurationParameters
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("b54826a6-81ba-45f9-a899-40ddaba83024"));
                public static FieldDescriptorID AdHocControlScript
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("99d2b240-e4d6-4623-a040-8dd4a21688e4"));
                public static FieldDescriptorID VisualizationOrder
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("5b7712fa-384e-4417-b281-d66956463660"));
                public static FieldDescriptorID NodeConfigurationExecutionOrder
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("e3805313-fc3a-4321-be34-a7d573d5ca9c"));
                public static FieldDescriptorID ManualConfigurationComplete
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("5bc85859-6756-4d1e-8961-6243a233dbcf"));
                public static FieldDescriptorID ReserveNode
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("f3c111f3-33fc-45a6-a4f2-8140b1c1e3ad"));
                public static FieldDescriptorID Hidden
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("372f67c9-30c8-4370-9a65-3d115c2d6d5c"));
                public static FieldDescriptorID CapabilityRequirements
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("0c003d2b-8d50-4873-9a8b-8a84aa00da9b"));
                public static FieldDescriptorID CapacityRequirements
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("ef9ec19f-18e0-4bf4-a013-d54d865c4de9"));
                public static FieldDescriptorID NodeStartTime
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("d932725e-a6f4-4707-bce5-5c749d8ccba7"));
                public static FieldDescriptorID NodeEndTime
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("d3c4926c-83a7-4ce7-9f4f-e8c4f4de9482"));
                public static FieldDescriptorID LinkedBookingIds
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("35167132-87db-4a8b-afd8-5bc120c1180a"));
                public static FieldDescriptorID ResourceSelectMode
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("52109652-da0c-4a34-935a-fbeacea21c0b"));
                public static FieldDescriptorID ResourceSelectState
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("c2525fb4-28eb-4816-b2e3-30556f5d4d3b"));
                public static FieldDescriptorID Billable
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("c5418bb2-8c9b-4bdf-8955-ff1be21df3e7"));
                public static FieldDescriptorID NodeConfiguration
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("7c13f5af-6a13-43bc-99f2-49c14d160397"));
                public static FieldDescriptorID NodeConfigurationStatus
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("3e268011-9ec3-465b-af62-2a4916f3e1f7"));
            }
        }

        public static class Definitions
        {
            public static DomDefinitionId Workflows
            {
                get;
            }

            = new DomDefinitionId(new Guid("aec69c0d-8f7c-44a7-aa21-6aa741ea6135"))
            {ModuleId = "(slc)workflow"};
            public static DomDefinitionId JobStatuses
            {
                get;
            }

            = new DomDefinitionId(new Guid("f64ec811-9c83-419e-8e45-33aeb17102a4"))
            {ModuleId = "(slc)workflow"};
            public static DomDefinitionId SessionData
            {
                get;
            }

            = new DomDefinitionId(new Guid("67e8ba7f-4518-4b7f-ab43-075c2f9c1c87"))
            {ModuleId = "(slc)workflow"};
            public static DomDefinitionId AppSettings
            {
                get;
            }

            = new DomDefinitionId(new Guid("e1ed621e-197d-4003-95f2-5c0722e37c75"))
            {ModuleId = "(slc)workflow"};
            public static DomDefinitionId Jobs
            {
                get;
            }

            = new DomDefinitionId(new Guid("094b7503-2cd8-4e86-a189-c33076cabfbc"))
            {ModuleId = "(slc)workflow"};
            public static DomDefinitionId Configuration
            {
                get;
            }

            = new DomDefinitionId(new Guid("b5106b24-851f-4525-9dbc-72b1c0f18b7a"))
            {ModuleId = "(slc)workflow"};
            public static DomDefinitionId Recurrences
            {
                get;
            }

            = new DomDefinitionId(new Guid("b0780b6b-200c-4156-8689-2c411e3aea78"))
            {ModuleId = "(slc)workflow"};
            public static DomDefinitionId MCRCockpit
            {
                get;
            }

            = new DomDefinitionId(new Guid("bb046357-ea92-4f52-89f4-ae9b6e1512b9"))
            {ModuleId = "(slc)workflow"};
            public static DomDefinitionId Rates
            {
                get;
            }

            = new DomDefinitionId(new Guid("e811303b-7bd3-48bf-a7e1-ae8aad9247f4"))
            {ModuleId = "(slc)workflow"};
            public static DomDefinitionId JobNodeRelationshipActions
            {
                get;
            }

            = new DomDefinitionId(new Guid("e4bd1568-1bac-4e72-913c-a175e2267c91"))
            {ModuleId = "(slc)workflow"};
        }

        public static class Behaviors
        {
            public static class Workflow_Behavior
            {
                public static DomBehaviorDefinitionId Id
                {
                    get;
                }

                = new DomBehaviorDefinitionId(new Guid("6ee464d6-d84b-4d92-9135-ed95a6f69e87"))
                {ModuleId = "(slc)workflow"};
                public static class Statuses
                {
                    public const string Draft = "dca9b656-6e4d-41a8-9f64-c57986fc672d";
                    public const string Complete = "04e1ffa7-ff8e-401f-90c4-25f2bded26f5";
                    public const string Obsolete = "10e4c6ab-f576-4f7a-b32c-775597dafd49";
                }

                public static class Transitions
                {
                    public const string Draft_To_Complete = "draft_to_complete";
                    public const string Complete_To_Obsolete = "complete_to_obsolete";
                }

                public static class Actions
                {
                    public const string _1 = "1";
                    public const string _2 = "2";
                    public const string EditWorkflowConfig = "edit workflow config";
                }
            }

            public static class Job_Behavior
            {
                public static DomBehaviorDefinitionId Id
                {
                    get;
                }

                = new DomBehaviorDefinitionId(new Guid("4db4650b-c81b-48df-b48f-d6f47e69a829"))
                {ModuleId = "(slc)workflow"};
                public static class Statuses
                {
                    public const string Draft = "bd1d4175-3e1b-4a52-95a8-e215b76a2dfc";
                    public const string Tentative = "a48ce836-a02e-45af-9e1a-f3950550b564";
                    public const string Confirmed = "985146f2-38de-4f0d-86a5-8c292a07e562";
                    public const string Running = "c2c2f157-63c6-4ee5-b648-c150c450aac4";
                    public const string Completed = "d23a5d17-af16-4268-b390-f692e6717f54";
                    public const string ReadyForInvoice = "7e58d816-6884-40cf-a4c9-0d2b6852d99a";
                    public const string Canceled = "d5021aa6-67b9-420d-952d-cb565fee3562";
                    public const string Invoiced = "fb6a95d4-9043-46a7-92d9-56cf855cefc3";
                }

                public static class Transitions
                {
                    public const string Draft_To_Tentative = "draft_to_tentative";
                    public const string Tentative_To_Confirmed = "tentative_to_confirmed";
                    public const string Confirmed_To_Running = "confirmed_to_running";
                    public const string Running_To_Completed = "running_to_completed";
                    public const string Completed_To_Readyforinvoice = "completed_to_readyforinvoice";
                    public const string Readyforinvoice_To_Invoiced = "readyforinvoice_to_invoiced";
                    public const string Confirmed_To_Canceled = "confirmed_to_canceled";
                    public const string Canceled_To_Readyforinvoice = "canceled_to_readyforinvoice";
                    public const string Tentative_To_Canceled = "tentative_to_canceled";
                    public const string Draft_To_Completed = "draft_to_completed";
                    public const string Tentative_To_Completed = "tentative_to_completed";
                }

                public static class Actions
                {
                    public const string Returnfromerrorstate = "returnfromerrorstate";
                }
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Dom Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.SlcWorkflow
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
    using Skyline.DataMiner.Net.Messages;

    /// <summary>
    /// Represents a wrapper class for accessing a WorkflowsInstance DOM instance.
    /// The <see cref="WorkflowsInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class WorkflowsInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowsInstance"/> class. Creates an empty <see cref="WorkflowsInstance"/> instance with default settings.
        /// </summary>
        public WorkflowsInstance(): base(SlcWorkflowIds.Definitions.Workflows)
        {
            InitializeProperties();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowsInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="WorkflowsInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public WorkflowsInstance(DomInstance domInstance): base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcWorkflowIds.Definitions.Workflows))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcWorkflowIds.Definitions.Workflows)}'", nameof(domInstance));
            InitializeProperties();
        }

        /// <summary>
        /// Gets or sets the WorkflowInfo section of the DOM Instance.
        /// </summary>
        public WorkflowInfoSection WorkflowInfo
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the WorkflowExecution section of the DOM Instance.
        /// </summary>
        public WorkflowExecutionSection WorkflowExecution
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the MonitoringSettings section of the DOM Instance.
        /// </summary>
        public MonitoringSettingsSection MonitoringSettings
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the Connections section of the DOM Instance.
        /// </summary>
        public IList<ConnectionsSection> Connections
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets or sets the Nodes section of the DOM Instance.
        /// </summary>
        public IList<NodesSection> Nodes
        {
            get;
            private set;
        }

        public static explicit operator WorkflowsInstance(DomInstance instance)
        {
            return new WorkflowsInstance(instance);
        }

        /// <inheritdoc />
        public override DomInstance ToInstance()
        {
            domInstance.Sections.Clear();
            domInstance.Sections.Add(WorkflowInfo.ToSection());
            domInstance.Sections.Add(WorkflowExecution.ToSection());
            domInstance.Sections.Add(MonitoringSettings.ToSection());
            foreach (var item in Connections)
            {
                domInstance.Sections.Add(item.ToSection());
            }

            foreach (var item in Nodes)
            {
                domInstance.Sections.Add(item.ToSection());
            }

            return domInstance;
        }

        /// <inheritdoc />
        public override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected override void InitializeProperties()
        {
            WorkflowInfo = new WorkflowInfoSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.WorkflowInfo.Id)));
            WorkflowExecution = new WorkflowExecutionSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.WorkflowExecution.Id)));
            MonitoringSettings = new MonitoringSettingsSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.MonitoringSettings.Id)));
            Connections = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.Connections.Id)).Select(section => new ConnectionsSection(section)).ToList();
            Nodes = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.Nodes.Id)).Select(section => new NodesSection(section)).ToList();
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a JobStatusesInstance DOM instance.
    /// The <see cref="JobStatusesInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class JobStatusesInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobStatusesInstance"/> class. Creates an empty <see cref="JobStatusesInstance"/> instance with default settings.
        /// </summary>
        public JobStatusesInstance(): base(SlcWorkflowIds.Definitions.JobStatuses)
        {
            InitializeProperties();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobStatusesInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="JobStatusesInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public JobStatusesInstance(DomInstance domInstance): base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcWorkflowIds.Definitions.JobStatuses))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcWorkflowIds.Definitions.JobStatuses)}'", nameof(domInstance));
            InitializeProperties();
        }

        /// <summary>
        /// Gets or sets the JobStates section of the DOM Instance.
        /// </summary>
        public JobStatesSection JobStates
        {
            get;
            set;
        }

        public static explicit operator JobStatusesInstance(DomInstance instance)
        {
            return new JobStatusesInstance(instance);
        }

        /// <inheritdoc />
        public override DomInstance ToInstance()
        {
            domInstance.Sections.Clear();
            domInstance.Sections.Add(JobStates.ToSection());
            return domInstance;
        }

        /// <inheritdoc />
        public override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected override void InitializeProperties()
        {
            JobStates = new JobStatesSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.JobStates.Id)));
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a SessionDataInstance DOM instance.
    /// The <see cref="SessionDataInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class SessionDataInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionDataInstance"/> class. Creates an empty <see cref="SessionDataInstance"/> instance with default settings.
        /// </summary>
        public SessionDataInstance(): base(SlcWorkflowIds.Definitions.SessionData)
        {
            InitializeProperties();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionDataInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="SessionDataInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public SessionDataInstance(DomInstance domInstance): base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcWorkflowIds.Definitions.SessionData))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcWorkflowIds.Definitions.SessionData)}'", nameof(domInstance));
            InitializeProperties();
        }

        /// <summary>
        /// Gets or sets the SessionDataStore section of the DOM Instance.
        /// </summary>
        public SessionDataStoreSection SessionDataStore
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the SessionDataUser section of the DOM Instance.
        /// </summary>
        public SessionDataUserSection SessionDataUser
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the SessionFilter section of the DOM Instance.
        /// </summary>
        public IList<SessionFilterSection> SessionFilter
        {
            get;
            private set;
        }

        public static explicit operator SessionDataInstance(DomInstance instance)
        {
            return new SessionDataInstance(instance);
        }

        /// <inheritdoc />
        public override DomInstance ToInstance()
        {
            domInstance.Sections.Clear();
            if (!SessionDataStore.IsEmpty)
            {
                domInstance.Sections.Add(SessionDataStore.ToSection());
            }

            domInstance.Sections.Add(SessionDataUser.ToSection());
            foreach (var item in SessionFilter)
            {
                domInstance.Sections.Add(item.ToSection());
            }

            return domInstance;
        }

        /// <inheritdoc />
        public override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected override void InitializeProperties()
        {
            SessionDataStore = new SessionDataStoreSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.SessionDataStore.Id)));
            SessionDataUser = new SessionDataUserSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.SessionDataUser.Id)));
            SessionFilter = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.SessionFilter.Id)).Select(section => new SessionFilterSection(section)).ToList();
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a AppSettingsInstance DOM instance.
    /// The <see cref="AppSettingsInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class AppSettingsInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppSettingsInstance"/> class. Creates an empty <see cref="AppSettingsInstance"/> instance with default settings.
        /// </summary>
        public AppSettingsInstance(): base(SlcWorkflowIds.Definitions.AppSettings)
        {
            InitializeProperties();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppSettingsInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="AppSettingsInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public AppSettingsInstance(DomInstance domInstance): base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcWorkflowIds.Definitions.AppSettings))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcWorkflowIds.Definitions.AppSettings)}'", nameof(domInstance));
            InitializeProperties();
        }

        /// <summary>
        /// Gets or sets the JobSettings section of the DOM Instance.
        /// </summary>
        public JobSettingsSection JobSettings
        {
            get;
            set;
        }

        public static explicit operator AppSettingsInstance(DomInstance instance)
        {
            return new AppSettingsInstance(instance);
        }

        /// <inheritdoc />
        public override DomInstance ToInstance()
        {
            domInstance.Sections.Clear();
            domInstance.Sections.Add(JobSettings.ToSection());
            return domInstance;
        }

        /// <inheritdoc />
        public override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected override void InitializeProperties()
        {
            JobSettings = new JobSettingsSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.JobSettings.Id)));
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a JobsInstance DOM instance.
    /// The <see cref="JobsInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class JobsInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobsInstance"/> class. Creates an empty <see cref="JobsInstance"/> instance with default settings.
        /// </summary>
        public JobsInstance(): base(SlcWorkflowIds.Definitions.Jobs)
        {
            InitializeProperties();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="JobsInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public JobsInstance(DomInstance domInstance): base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcWorkflowIds.Definitions.Jobs))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcWorkflowIds.Definitions.Jobs)}'", nameof(domInstance));
            InitializeProperties();
        }

        /// <summary>
        /// Gets or sets the NodeRelationships section of the DOM Instance.
        /// </summary>
        public IList<NodeRelationshipsSection> NodeRelationships
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets or sets the JobError section of the DOM Instance.
        /// </summary>
        public JobErrorSection JobError
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the CostingAndBilling section of the DOM Instance.
        /// </summary>
        public CostingAndBillingSection CostingAndBilling
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the JobExecution section of the DOM Instance.
        /// </summary>
        public JobExecutionSection JobExecution
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the CostingAndBillingDetails section of the DOM Instance.
        /// </summary>
        public IList<CostingAndBillingDetailsSection> CostingAndBillingDetails
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets or sets the Errors section of the DOM Instance.
        /// </summary>
        public IList<ErrorsSection> Errors
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets or sets the MonitoringSettings section of the DOM Instance.
        /// </summary>
        public MonitoringSettingsSection MonitoringSettings
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the JobInfo section of the DOM Instance.
        /// </summary>
        public JobInfoSection JobInfo
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the Connections section of the DOM Instance.
        /// </summary>
        public IList<ConnectionsSection> Connections
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets or sets the Nodes section of the DOM Instance.
        /// </summary>
        public IList<NodesSection> Nodes
        {
            get;
            private set;
        }

        public static explicit operator JobsInstance(DomInstance instance)
        {
            return new JobsInstance(instance);
        }

        /// <inheritdoc />
        public override DomInstance ToInstance()
        {
            domInstance.Sections.Clear();
            foreach (var item in NodeRelationships)
            {
                domInstance.Sections.Add(item.ToSection());
            }

            domInstance.Sections.Add(JobError.ToSection());
            domInstance.Sections.Add(CostingAndBilling.ToSection());
            domInstance.Sections.Add(JobExecution.ToSection());
            foreach (var item in CostingAndBillingDetails)
            {
                domInstance.Sections.Add(item.ToSection());
            }

            foreach (var item in Errors)
            {
                domInstance.Sections.Add(item.ToSection());
            }

            domInstance.Sections.Add(MonitoringSettings.ToSection());
            domInstance.Sections.Add(JobInfo.ToSection());
            foreach (var item in Connections)
            {
                domInstance.Sections.Add(item.ToSection());
            }

            foreach (var item in Nodes)
            {
                domInstance.Sections.Add(item.ToSection());
            }

            return domInstance;
        }

        /// <inheritdoc />
        public override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected override void InitializeProperties()
        {
            NodeRelationships = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.NodeRelationships.Id)).Select(section => new NodeRelationshipsSection(section)).ToList();
            JobError = new JobErrorSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.JobError.Id)));
            CostingAndBilling = new CostingAndBillingSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.CostingAndBilling.Id)));
            JobExecution = new JobExecutionSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.JobExecution.Id)));
            CostingAndBillingDetails = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.CostingAndBillingDetails.Id)).Select(section => new CostingAndBillingDetailsSection(section)).ToList();
            Errors = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.Errors.Id)).Select(section => new ErrorsSection(section)).ToList();
            MonitoringSettings = new MonitoringSettingsSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.MonitoringSettings.Id)));
            JobInfo = new JobInfoSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.JobInfo.Id)));
            Connections = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.Connections.Id)).Select(section => new ConnectionsSection(section)).ToList();
            Nodes = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.Nodes.Id)).Select(section => new NodesSection(section)).ToList();
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a ConfigurationInstance DOM instance.
    /// The <see cref="ConfigurationInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class ConfigurationInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationInstance"/> class. Creates an empty <see cref="ConfigurationInstance"/> instance with default settings.
        /// </summary>
        public ConfigurationInstance(): base(SlcWorkflowIds.Definitions.Configuration)
        {
            InitializeProperties();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="ConfigurationInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public ConfigurationInstance(DomInstance domInstance): base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcWorkflowIds.Definitions.Configuration))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcWorkflowIds.Definitions.Configuration)}'", nameof(domInstance));
            InitializeProperties();
        }

        /// <summary>
        /// Gets or sets the ProfileParameterValues section of the DOM Instance.
        /// </summary>
        public IList<ProfileParameterValuesSection> ProfileParameterValues
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets or sets the ConfigurationInfo section of the DOM Instance.
        /// </summary>
        public ConfigurationInfoSection ConfigurationInfo
        {
            get;
            set;
        }

        public static explicit operator ConfigurationInstance(DomInstance instance)
        {
            return new ConfigurationInstance(instance);
        }

        /// <inheritdoc />
        public override DomInstance ToInstance()
        {
            domInstance.Sections.Clear();
            foreach (var item in ProfileParameterValues)
            {
                domInstance.Sections.Add(item.ToSection());
            }

            if (!ConfigurationInfo.IsEmpty)
            {
                domInstance.Sections.Add(ConfigurationInfo.ToSection());
            }

            return domInstance;
        }

        /// <inheritdoc />
        public override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected override void InitializeProperties()
        {
            ProfileParameterValues = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.ProfileParameterValues.Id)).Select(section => new ProfileParameterValuesSection(section)).ToList();
            ConfigurationInfo = new ConfigurationInfoSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.ConfigurationInfo.Id)));
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a RecurrencesInstance DOM instance.
    /// The <see cref="RecurrencesInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class RecurrencesInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecurrencesInstance"/> class. Creates an empty <see cref="RecurrencesInstance"/> instance with default settings.
        /// </summary>
        public RecurrencesInstance(): base(SlcWorkflowIds.Definitions.Recurrences)
        {
            InitializeProperties();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecurrencesInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="RecurrencesInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public RecurrencesInstance(DomInstance domInstance): base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcWorkflowIds.Definitions.Recurrences))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcWorkflowIds.Definitions.Recurrences)}'", nameof(domInstance));
            InitializeProperties();
        }

        /// <summary>
        /// Gets or sets the RecurrenceDetails section of the DOM Instance.
        /// </summary>
        public RecurrenceDetailsSection RecurrenceDetails
        {
            get;
            set;
        }

        public static explicit operator RecurrencesInstance(DomInstance instance)
        {
            return new RecurrencesInstance(instance);
        }

        /// <inheritdoc />
        public override DomInstance ToInstance()
        {
            domInstance.Sections.Clear();
            domInstance.Sections.Add(RecurrenceDetails.ToSection());
            return domInstance;
        }

        /// <inheritdoc />
        public override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected override void InitializeProperties()
        {
            RecurrenceDetails = new RecurrenceDetailsSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.RecurrenceDetails.Id)));
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a MCRCockpitInstance DOM instance.
    /// The <see cref="MCRCockpitInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class MCRCockpitInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MCRCockpitInstance"/> class. Creates an empty <see cref="MCRCockpitInstance"/> instance with default settings.
        /// </summary>
        public MCRCockpitInstance(): base(SlcWorkflowIds.Definitions.MCRCockpit)
        {
            InitializeProperties();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MCRCockpitInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="MCRCockpitInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public MCRCockpitInstance(DomInstance domInstance): base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcWorkflowIds.Definitions.MCRCockpit))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcWorkflowIds.Definitions.MCRCockpit)}'", nameof(domInstance));
            InitializeProperties();
        }

        /// <summary>
        /// Gets or sets the MCR_Timestepper_Currentrange section of the DOM Instance.
        /// </summary>
        public MCR_Timestepper_CurrentrangeSection MCR_Timestepper_Currentrange
        {
            get;
            set;
        }

        public static explicit operator MCRCockpitInstance(DomInstance instance)
        {
            return new MCRCockpitInstance(instance);
        }

        /// <inheritdoc />
        public override DomInstance ToInstance()
        {
            domInstance.Sections.Clear();
            domInstance.Sections.Add(MCR_Timestepper_Currentrange.ToSection());
            return domInstance;
        }

        /// <inheritdoc />
        public override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected override void InitializeProperties()
        {
            MCR_Timestepper_Currentrange = new MCR_Timestepper_CurrentrangeSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.MCR_Timestepper_Currentrange.Id)));
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a RatesInstance DOM instance.
    /// The <see cref="RatesInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class RatesInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RatesInstance"/> class. Creates an empty <see cref="RatesInstance"/> instance with default settings.
        /// </summary>
        public RatesInstance(): base(SlcWorkflowIds.Definitions.Rates)
        {
            InitializeProperties();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RatesInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="RatesInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public RatesInstance(DomInstance domInstance): base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcWorkflowIds.Definitions.Rates))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcWorkflowIds.Definitions.Rates)}'", nameof(domInstance));
            InitializeProperties();
        }

        /// <summary>
        /// Gets or sets the Rate section of the DOM Instance.
        /// </summary>
        public RateSection Rate
        {
            get;
            set;
        }

        public static explicit operator RatesInstance(DomInstance instance)
        {
            return new RatesInstance(instance);
        }

        /// <inheritdoc />
        public override DomInstance ToInstance()
        {
            domInstance.Sections.Clear();
            domInstance.Sections.Add(Rate.ToSection());
            return domInstance;
        }

        /// <inheritdoc />
        public override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected override void InitializeProperties()
        {
            Rate = new RateSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.Rate.Id)));
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a JobNodeRelationshipActionsInstance DOM instance.
    /// The <see cref="JobNodeRelationshipActionsInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class JobNodeRelationshipActionsInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobNodeRelationshipActionsInstance"/> class. Creates an empty <see cref="JobNodeRelationshipActionsInstance"/> instance with default settings.
        /// </summary>
        public JobNodeRelationshipActionsInstance(): base(SlcWorkflowIds.Definitions.JobNodeRelationshipActions)
        {
            InitializeProperties();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobNodeRelationshipActionsInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="JobNodeRelationshipActionsInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public JobNodeRelationshipActionsInstance(DomInstance domInstance): base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcWorkflowIds.Definitions.JobNodeRelationshipActions))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcWorkflowIds.Definitions.JobNodeRelationshipActions)}'", nameof(domInstance));
            InitializeProperties();
        }

        /// <summary>
        /// Gets or sets the JobNodeRelationshipReplaceActions section of the DOM Instance.
        /// </summary>
        public JobNodeRelationshipReplaceActionsSection JobNodeRelationshipReplaceActions
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the JobNodeRelationshipGeneralActions section of the DOM Instance.
        /// </summary>
        public JobNodeRelationshipGeneralActionsSection JobNodeRelationshipGeneralActions
        {
            get;
            set;
        }

        public static explicit operator JobNodeRelationshipActionsInstance(DomInstance instance)
        {
            return new JobNodeRelationshipActionsInstance(instance);
        }

        /// <inheritdoc />
        public override DomInstance ToInstance()
        {
            domInstance.Sections.Clear();
            domInstance.Sections.Add(JobNodeRelationshipReplaceActions.ToSection());
            domInstance.Sections.Add(JobNodeRelationshipGeneralActions.ToSection());
            return domInstance;
        }

        /// <inheritdoc />
        public override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected override void InitializeProperties()
        {
            JobNodeRelationshipReplaceActions = new JobNodeRelationshipReplaceActionsSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.Id)));
            JobNodeRelationshipGeneralActions = new JobNodeRelationshipGeneralActionsSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.Id)));
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DOM Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.SlcWorkflow
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
    using Skyline.DataMiner.Net.Apps.Sections.Sections;
    using Skyline.DataMiner.Net.Messages;
    using Skyline.DataMiner.Net.Sections;

    /// <summary>
    /// Represents a wrapper class for accessing a RateSection section.
    /// The <see cref="RateSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class RateSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RateSection"/> class. Creates an empty <see cref="RateSection"/> object with default settings.
        /// </summary>
        public RateSection(): base(SlcWorkflowIds.Sections.Rate.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RateSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="RateSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public RateSection(Section section): base(SlcWorkflowIds.Sections.Rate.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.Rate.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcWorkflowIds.Sections.Rate.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the Qty field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Int64? Qty
        {
            get
            {
                var wrapper = section.GetValue<Int64>(SlcWorkflowIds.Sections.Rate.Qty);
                if (wrapper != null)
                {
                    return (Int64? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Rate.Qty);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Rate.Qty, (Int64)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the QtyType field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcWorkflowIds.Enums.QtytypeEnum? QtyType
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Rate.QtyType);
                if (wrapper != null)
                {
                    return (SlcWorkflowIds.Enums.QtytypeEnum? )SlcWorkflowIds.Enums.Qtytype.ToEnum(wrapper.Value);
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Rate.QtyType);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Rate.QtyType, SlcWorkflowIds.Enums.Qtytype.ToValue((SlcWorkflowIds.Enums.QtytypeEnum)value));
                }
            }
        }

        /// <summary>
        /// Gets or sets the AmountPerUnit field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Double? AmountPerUnit
        {
            get
            {
                var wrapper = section.GetValue<Double>(SlcWorkflowIds.Sections.Rate.AmountPerUnit);
                if (wrapper != null)
                {
                    return (Double? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Rate.AmountPerUnit);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Rate.AmountPerUnit, (Double)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TotalAmount field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Double? TotalAmount
        {
            get
            {
                var wrapper = section.GetValue<Double>(SlcWorkflowIds.Sections.Rate.TotalAmount);
                if (wrapper != null)
                {
                    return (Double? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Rate.TotalAmount);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Rate.TotalAmount, (Double)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TotalNetAmount field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Double? TotalNetAmount
        {
            get
            {
                var wrapper = section.GetValue<Double>(SlcWorkflowIds.Sections.Rate.TotalNetAmount);
                if (wrapper != null)
                {
                    return (Double? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Rate.TotalNetAmount);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Rate.TotalNetAmount, (Double)value);
                }
            }
        }

        /// <inheritdoc />
        public override Section ToSection()
        {
            if (section.GetValue<Int64>(SlcWorkflowIds.Sections.Rate.Qty) == null)
                throw new InvalidOperationException("'Qty' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            if (section.GetValue<String>(SlcWorkflowIds.Sections.Rate.QtyType) == null)
                throw new InvalidOperationException("'QtyType' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a SessionDataStoreSection section.
    /// The <see cref="SessionDataStoreSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class SessionDataStoreSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionDataStoreSection"/> class. Creates an empty <see cref="SessionDataStoreSection"/> object with default settings.
        /// </summary>
        public SessionDataStoreSection(): base(SlcWorkflowIds.Sections.SessionDataStore.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionDataStoreSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="SessionDataStoreSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public SessionDataStoreSection(Section section): base(SlcWorkflowIds.Sections.SessionDataStore.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.SessionDataStore.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcWorkflowIds.Sections.SessionDataStore.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the JobId field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String JobId
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.SessionDataStore.JobId);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.SessionDataStore.JobId);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.SessionDataStore.JobId, (String)value);
                }
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a SessionDataUserSection section.
    /// The <see cref="SessionDataUserSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class SessionDataUserSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionDataUserSection"/> class. Creates an empty <see cref="SessionDataUserSection"/> object with default settings.
        /// </summary>
        public SessionDataUserSection(): base(SlcWorkflowIds.Sections.SessionDataUser.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionDataUserSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="SessionDataUserSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public SessionDataUserSection(Section section): base(SlcWorkflowIds.Sections.SessionDataUser.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.SessionDataUser.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcWorkflowIds.Sections.SessionDataUser.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the User field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String User
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.SessionDataUser.User);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.SessionDataUser.User);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.SessionDataUser.User, (String)value);
                }
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a NodeRelationshipsSection section.
    /// The <see cref="NodeRelationshipsSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class NodeRelationshipsSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NodeRelationshipsSection"/> class. Creates an empty <see cref="NodeRelationshipsSection"/> object with default settings.
        /// </summary>
        public NodeRelationshipsSection(): base(SlcWorkflowIds.Sections.NodeRelationships.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NodeRelationshipsSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="NodeRelationshipsSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public NodeRelationshipsSection(Section section): base(SlcWorkflowIds.Sections.NodeRelationships.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.NodeRelationships.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcWorkflowIds.Sections.NodeRelationships.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the ParentNodeID field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String ParentNodeID
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.NodeRelationships.ParentNodeID);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.NodeRelationships.ParentNodeID);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.NodeRelationships.ParentNodeID, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ChildNodeID field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String ChildNodeID
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.NodeRelationships.ChildNodeID);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.NodeRelationships.ChildNodeID);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.NodeRelationships.ChildNodeID, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the RelationshipType field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? RelationshipType
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcWorkflowIds.Sections.NodeRelationships.RelationshipType);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.NodeRelationships.RelationshipType);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.NodeRelationships.RelationshipType, (Guid)value);
                }
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a WorkflowInfoSection section.
    /// The <see cref="WorkflowInfoSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class WorkflowInfoSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowInfoSection"/> class. Creates an empty <see cref="WorkflowInfoSection"/> object with default settings.
        /// </summary>
        public WorkflowInfoSection(): base(SlcWorkflowIds.Sections.WorkflowInfo.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowInfoSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="WorkflowInfoSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public WorkflowInfoSection(Section section): base(SlcWorkflowIds.Sections.WorkflowInfo.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.WorkflowInfo.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcWorkflowIds.Sections.WorkflowInfo.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the WorkflowName field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String WorkflowName
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.WorkflowInfo.WorkflowName);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.WorkflowInfo.WorkflowName);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.WorkflowInfo.WorkflowName, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the WorkflowDescription field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String WorkflowDescription
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.WorkflowInfo.WorkflowDescription);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.WorkflowInfo.WorkflowDescription);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.WorkflowInfo.WorkflowDescription, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Favorite field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Boolean? Favorite
        {
            get
            {
                var wrapper = section.GetValue<Boolean>(SlcWorkflowIds.Sections.WorkflowInfo.Favorite);
                if (wrapper != null)
                {
                    return (Boolean? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.WorkflowInfo.Favorite);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.WorkflowInfo.Favorite, (Boolean)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Priority field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcWorkflowIds.Enums.Priority? Priority
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.WorkflowInfo.Priority);
                if (wrapper != null)
                {
                    return (SlcWorkflowIds.Enums.Priority? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.WorkflowInfo.Priority);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.WorkflowInfo.Priority, (Int32)value);
                }
            }
        }

        /// <inheritdoc />
        public override Section ToSection()
        {
            if (section.GetValue<String>(SlcWorkflowIds.Sections.WorkflowInfo.WorkflowName) == null)
                throw new InvalidOperationException("'WorkflowName' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a JobErrorSection section.
    /// The <see cref="JobErrorSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class JobErrorSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobErrorSection"/> class. Creates an empty <see cref="JobErrorSection"/> object with default settings.
        /// </summary>
        public JobErrorSection(): base(SlcWorkflowIds.Sections.JobError.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobErrorSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="JobErrorSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public JobErrorSection(Section section): base(SlcWorkflowIds.Sections.JobError.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.JobError.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcWorkflowIds.Sections.JobError.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the ErrorType field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? ErrorType
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcWorkflowIds.Sections.JobError.ErrorType);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobError.ErrorType);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobError.ErrorType, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the StateAtError field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String StateAtError
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.JobError.StateAtError);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobError.StateAtError);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobError.StateAtError, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ErrorMessage field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String ErrorMessage
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.JobError.ErrorMessage);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobError.ErrorMessage);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobError.ErrorMessage, (String)value);
                }
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a ProfileParameterValuesSection section.
    /// The <see cref="ProfileParameterValuesSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class ProfileParameterValuesSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileParameterValuesSection"/> class. Creates an empty <see cref="ProfileParameterValuesSection"/> object with default settings.
        /// </summary>
        public ProfileParameterValuesSection(): base(SlcWorkflowIds.Sections.ProfileParameterValues.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileParameterValuesSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="ProfileParameterValuesSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public ProfileParameterValuesSection(Section section): base(SlcWorkflowIds.Sections.ProfileParameterValues.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.ProfileParameterValues.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcWorkflowIds.Sections.ProfileParameterValues.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the ProfileParameterID field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String ProfileParameterID
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.ProfileParameterValues.ProfileParameterID);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.ProfileParameterValues.ProfileParameterID);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.ProfileParameterValues.ProfileParameterID, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the StringValue field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String StringValue
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.ProfileParameterValues.StringValue);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.ProfileParameterValues.StringValue);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.ProfileParameterValues.StringValue, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the DoubleValue field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Double? DoubleValue
        {
            get
            {
                var wrapper = section.GetValue<Double>(SlcWorkflowIds.Sections.ProfileParameterValues.DoubleValue);
                if (wrapper != null)
                {
                    return (Double? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.ProfileParameterValues.DoubleValue);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.ProfileParameterValues.DoubleValue, (Double)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ReferenceID field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String ReferenceID
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.ProfileParameterValues.ReferenceID);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.ProfileParameterValues.ReferenceID);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.ProfileParameterValues.ReferenceID, (String)value);
                }
            }
        }

        /// <inheritdoc />
        public override Section ToSection()
        {
            if (section.GetValue<String>(SlcWorkflowIds.Sections.ProfileParameterValues.ProfileParameterID) == null)
                throw new InvalidOperationException("'ProfileParameterID' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a CostingAndBillingSection section.
    /// The <see cref="CostingAndBillingSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class CostingAndBillingSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CostingAndBillingSection"/> class. Creates an empty <see cref="CostingAndBillingSection"/> object with default settings.
        /// </summary>
        public CostingAndBillingSection(): base(SlcWorkflowIds.Sections.CostingAndBilling.Id)
        {
            AdditionalContacts = new List<Guid>();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CostingAndBillingSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="CostingAndBillingSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public CostingAndBillingSection(Section section): base(SlcWorkflowIds.Sections.CostingAndBilling.Id)
        {
            if (section == null)
            {
                AdditionalContacts = new List<Guid>();
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.CostingAndBilling.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcWorkflowIds.Sections.CostingAndBilling.Id)}'", nameof(section));
            }

            this.section = section;
            var additionalContacts = section.GetListValue<Guid>(SlcWorkflowIds.Sections.CostingAndBilling.AdditionalContacts);
            AdditionalContacts = additionalContacts != null ? additionalContacts.Values : new List<Guid>();
        }

        /// <summary>
        /// Gets or sets the Organization field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? Organization
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcWorkflowIds.Sections.CostingAndBilling.Organization);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.Organization);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.Organization, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the JobOwner field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? JobOwner
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcWorkflowIds.Sections.CostingAndBilling.JobOwner);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.JobOwner);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.JobOwner, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the AdditionalContacts field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public IList<Guid> AdditionalContacts
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets or sets the Contract field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? Contract
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcWorkflowIds.Sections.CostingAndBilling.Contract);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.Contract);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.Contract, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the JobStatus field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String JobStatus
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.CostingAndBilling.JobStatus);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.JobStatus);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.JobStatus, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ContractUplift field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Double? ContractUplift
        {
            get
            {
                var wrapper = section.GetValue<Double>(SlcWorkflowIds.Sections.CostingAndBilling.ContractUplift);
                if (wrapper != null)
                {
                    return (Double? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.ContractUplift);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.ContractUplift, (Double)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ContractDiscount field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Double? ContractDiscount
        {
            get
            {
                var wrapper = section.GetValue<Double>(SlcWorkflowIds.Sections.CostingAndBilling.ContractDiscount);
                if (wrapper != null)
                {
                    return (Double? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.ContractDiscount);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.ContractDiscount, (Double)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the SpeedOrderIncrementOnTopOfBillingPrice field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Double? SpeedOrderIncrementOnTopOfBillingPrice
        {
            get
            {
                var wrapper = section.GetValue<Double>(SlcWorkflowIds.Sections.CostingAndBilling.SpeedOrderIncrementOnTopOfBillingPrice);
                if (wrapper != null)
                {
                    return (Double? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.SpeedOrderIncrementOnTopOfBillingPrice);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.SpeedOrderIncrementOnTopOfBillingPrice, (Double)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the SpeedOrderFixedFee field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Double? SpeedOrderFixedFee
        {
            get
            {
                var wrapper = section.GetValue<Double>(SlcWorkflowIds.Sections.CostingAndBilling.SpeedOrderFixedFee);
                if (wrapper != null)
                {
                    return (Double? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.SpeedOrderFixedFee);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.SpeedOrderFixedFee, (Double)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the CancellationOfBillingPrice field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Double? CancellationOfBillingPrice
        {
            get
            {
                var wrapper = section.GetValue<Double>(SlcWorkflowIds.Sections.CostingAndBilling.CancellationOfBillingPrice);
                if (wrapper != null)
                {
                    return (Double? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.CancellationOfBillingPrice);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.CancellationOfBillingPrice, (Double)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the CancellationFixedFee field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String CancellationFixedFee
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.CostingAndBilling.CancellationFixedFee);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.CancellationFixedFee);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.CancellationFixedFee, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the LastBillCalculation field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public DateTime? LastBillCalculation
        {
            get
            {
                var wrapper = section.GetValue<DateTime>(SlcWorkflowIds.Sections.CostingAndBilling.LastBillCalculation);
                if (wrapper != null)
                {
                    return (DateTime? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.LastBillCalculation);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.LastBillCalculation, (DateTime)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TotalBillNetAmount field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Double? TotalBillNetAmount
        {
            get
            {
                var wrapper = section.GetValue<Double>(SlcWorkflowIds.Sections.CostingAndBilling.TotalBillNetAmount);
                if (wrapper != null)
                {
                    return (Double? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.TotalBillNetAmount);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.TotalBillNetAmount, (Double)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TotalBillNetOverrideAmount field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Double? TotalBillNetOverrideAmount
        {
            get
            {
                var wrapper = section.GetValue<Double>(SlcWorkflowIds.Sections.CostingAndBilling.TotalBillNetOverrideAmount);
                if (wrapper != null)
                {
                    return (Double? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.TotalBillNetOverrideAmount);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.TotalBillNetOverrideAmount, (Double)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the BillCurrency field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? BillCurrency
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcWorkflowIds.Sections.CostingAndBilling.BillCurrency);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.BillCurrency);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.BillCurrency, (Guid)value);
                }
            }
        }

        /// <inheritdoc />
        public override Section ToSection()
        {
            if (AdditionalContacts.Count == 0)
                section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.AdditionalContacts);
            else
                section.AddOrUpdateListValue<Guid>(SlcWorkflowIds.Sections.CostingAndBilling.AdditionalContacts, AdditionalContacts.ToList());
            if (section.GetValue<DateTime>(SlcWorkflowIds.Sections.CostingAndBilling.LastBillCalculation) == null)
                throw new InvalidOperationException("'LastBillCalculation' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a JobExecutionSection section.
    /// The <see cref="JobExecutionSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class JobExecutionSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobExecutionSection"/> class. Creates an empty <see cref="JobExecutionSection"/> object with default settings.
        /// </summary>
        public JobExecutionSection(): base(SlcWorkflowIds.Sections.JobExecution.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobExecutionSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="JobExecutionSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public JobExecutionSection(Section section): base(SlcWorkflowIds.Sections.JobExecution.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.JobExecution.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcWorkflowIds.Sections.JobExecution.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the JobExecutionScript field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String JobExecutionScript
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.JobExecution.JobExecutionScript);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobExecution.JobExecutionScript);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobExecution.JobExecutionScript, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the JobConfiguration field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? JobConfiguration
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcWorkflowIds.Sections.JobExecution.JobConfiguration);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobExecution.JobConfiguration);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobExecution.JobConfiguration, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the JobConfigurationStatus field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcWorkflowIds.Enums.Jobconfigurationstatus? JobConfigurationStatus
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.JobExecution.JobConfigurationStatus);
                if (wrapper != null)
                {
                    return (SlcWorkflowIds.Enums.Jobconfigurationstatus? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobExecution.JobConfigurationStatus);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobExecution.JobConfigurationStatus, (Int32)value);
                }
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a MCR_Timestepper_CurrentrangeSection section.
    /// The <see cref="MCR_Timestepper_CurrentrangeSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class MCR_Timestepper_CurrentrangeSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MCR_Timestepper_CurrentrangeSection"/> class. Creates an empty <see cref="MCR_Timestepper_CurrentrangeSection"/> object with default settings.
        /// </summary>
        public MCR_Timestepper_CurrentrangeSection(): base(SlcWorkflowIds.Sections.MCR_Timestepper_Currentrange.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MCR_Timestepper_CurrentrangeSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="MCR_Timestepper_CurrentrangeSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public MCR_Timestepper_CurrentrangeSection(Section section): base(SlcWorkflowIds.Sections.MCR_Timestepper_Currentrange.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.MCR_Timestepper_Currentrange.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcWorkflowIds.Sections.MCR_Timestepper_Currentrange.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the User field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String User
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.MCR_Timestepper_Currentrange.User);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.MCR_Timestepper_Currentrange.User);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.MCR_Timestepper_Currentrange.User, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the End field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public DateTime? End
        {
            get
            {
                var wrapper = section.GetValue<DateTime>(SlcWorkflowIds.Sections.MCR_Timestepper_Currentrange.End);
                if (wrapper != null)
                {
                    return (DateTime? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.MCR_Timestepper_Currentrange.End);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.MCR_Timestepper_Currentrange.End, (DateTime)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Start field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public DateTime? Start
        {
            get
            {
                var wrapper = section.GetValue<DateTime>(SlcWorkflowIds.Sections.MCR_Timestepper_Currentrange.Start);
                if (wrapper != null)
                {
                    return (DateTime? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.MCR_Timestepper_Currentrange.Start);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.MCR_Timestepper_Currentrange.Start, (DateTime)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Lastset field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public DateTime? Lastset
        {
            get
            {
                var wrapper = section.GetValue<DateTime>(SlcWorkflowIds.Sections.MCR_Timestepper_Currentrange.Lastset);
                if (wrapper != null)
                {
                    return (DateTime? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.MCR_Timestepper_Currentrange.Lastset);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.MCR_Timestepper_Currentrange.Lastset, (DateTime)value);
                }
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a ConfigurationInfoSection section.
    /// The <see cref="ConfigurationInfoSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class ConfigurationInfoSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationInfoSection"/> class. Creates an empty <see cref="ConfigurationInfoSection"/> object with default settings.
        /// </summary>
        public ConfigurationInfoSection(): base(SlcWorkflowIds.Sections.ConfigurationInfo.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationInfoSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="ConfigurationInfoSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public ConfigurationInfoSection(Section section): base(SlcWorkflowIds.Sections.ConfigurationInfo.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.ConfigurationInfo.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcWorkflowIds.Sections.ConfigurationInfo.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the ProfileDefinitionID field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String ProfileDefinitionID
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.ConfigurationInfo.ProfileDefinitionID);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.ConfigurationInfo.ProfileDefinitionID);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.ConfigurationInfo.ProfileDefinitionID, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the PresetID field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String PresetID
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.ConfigurationInfo.PresetID);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.ConfigurationInfo.PresetID);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.ConfigurationInfo.PresetID, (String)value);
                }
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a JobStatesSection section.
    /// The <see cref="JobStatesSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class JobStatesSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobStatesSection"/> class. Creates an empty <see cref="JobStatesSection"/> object with default settings.
        /// </summary>
        public JobStatesSection(): base(SlcWorkflowIds.Sections.JobStates.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobStatesSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="JobStatesSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public JobStatesSection(Section section): base(SlcWorkflowIds.Sections.JobStates.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.JobStates.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcWorkflowIds.Sections.JobStates.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the JobState field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String JobState
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.JobStates.JobState);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobStates.JobState);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobStates.JobState, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the JobDOMState field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcWorkflowIds.Enums.Jobdomstate? JobDOMState
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.JobStates.JobDOMState);
                if (wrapper != null)
                {
                    return (SlcWorkflowIds.Enums.Jobdomstate? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobStates.JobDOMState);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobStates.JobDOMState, (Int32)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Default field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Boolean? Default
        {
            get
            {
                var wrapper = section.GetValue<Boolean>(SlcWorkflowIds.Sections.JobStates.Default);
                if (wrapper != null)
                {
                    return (Boolean? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobStates.Default);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobStates.Default, (Boolean)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Active field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Boolean? Active
        {
            get
            {
                var wrapper = section.GetValue<Boolean>(SlcWorkflowIds.Sections.JobStates.Active);
                if (wrapper != null)
                {
                    return (Boolean? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobStates.Active);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobStates.Active, (Boolean)value);
                }
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a CostingAndBillingDetailsSection section.
    /// The <see cref="CostingAndBillingDetailsSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class CostingAndBillingDetailsSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CostingAndBillingDetailsSection"/> class. Creates an empty <see cref="CostingAndBillingDetailsSection"/> object with default settings.
        /// </summary>
        public CostingAndBillingDetailsSection(): base(SlcWorkflowIds.Sections.CostingAndBillingDetails.Id)
        {
            Rates = new List<Guid>();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CostingAndBillingDetailsSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="CostingAndBillingDetailsSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public CostingAndBillingDetailsSection(Section section): base(SlcWorkflowIds.Sections.CostingAndBillingDetails.Id)
        {
            if (section == null)
            {
                Rates = new List<Guid>();
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.CostingAndBillingDetails.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcWorkflowIds.Sections.CostingAndBillingDetails.Id)}'", nameof(section));
            }

            this.section = section;
            var rates = section.GetListValue<Guid>(SlcWorkflowIds.Sections.CostingAndBillingDetails.Rates);
            Rates = rates != null ? rates.Values : new List<Guid>();
        }

        /// <summary>
        /// Gets or sets the LineItemType field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcWorkflowIds.Enums.LineitemtypeEnum? LineItemType
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.CostingAndBillingDetails.LineItemType);
                if (wrapper != null)
                {
                    return (SlcWorkflowIds.Enums.LineitemtypeEnum? )SlcWorkflowIds.Enums.Lineitemtype.ToEnum(wrapper.Value);
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBillingDetails.LineItemType);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBillingDetails.LineItemType, SlcWorkflowIds.Enums.Lineitemtype.ToValue((SlcWorkflowIds.Enums.LineitemtypeEnum)value));
                }
            }
        }

        /// <summary>
        /// Gets or sets the ObjectType field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcWorkflowIds.Enums.ObjecttypeEnum? ObjectType
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.CostingAndBillingDetails.ObjectType);
                if (wrapper != null)
                {
                    return (SlcWorkflowIds.Enums.ObjecttypeEnum? )SlcWorkflowIds.Enums.Objecttype.ToEnum(wrapper.Value);
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBillingDetails.ObjectType);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBillingDetails.ObjectType, SlcWorkflowIds.Enums.Objecttype.ToValue((SlcWorkflowIds.Enums.ObjecttypeEnum)value));
                }
            }
        }

        /// <summary>
        /// Gets or sets the ObjectID field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String ObjectID
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.CostingAndBillingDetails.ObjectID);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBillingDetails.ObjectID);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBillingDetails.ObjectID, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Description field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String Description
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.CostingAndBillingDetails.Description);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBillingDetails.Description);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBillingDetails.Description, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the RateCard field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? RateCard
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcWorkflowIds.Sections.CostingAndBillingDetails.RateCard);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBillingDetails.RateCard);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBillingDetails.RateCard, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TotalNetOverrideAmount field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Double? TotalNetOverrideAmount
        {
            get
            {
                var wrapper = section.GetValue<Double>(SlcWorkflowIds.Sections.CostingAndBillingDetails.TotalNetOverrideAmount);
                if (wrapper != null)
                {
                    return (Double? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBillingDetails.TotalNetOverrideAmount);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBillingDetails.TotalNetOverrideAmount, (Double)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Currency field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? Currency
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcWorkflowIds.Sections.CostingAndBillingDetails.Currency);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBillingDetails.Currency);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBillingDetails.Currency, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Rates field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public IList<Guid> Rates
        {
            get;
            private set;
        }

        /// <inheritdoc />
        public override Section ToSection()
        {
            if (Rates.Count == 0)
                section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBillingDetails.Rates);
            else
                section.AddOrUpdateListValue<Guid>(SlcWorkflowIds.Sections.CostingAndBillingDetails.Rates, Rates.ToList());
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a SessionFilterSection section.
    /// The <see cref="SessionFilterSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class SessionFilterSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionFilterSection"/> class. Creates an empty <see cref="SessionFilterSection"/> object with default settings.
        /// </summary>
        public SessionFilterSection(): base(SlcWorkflowIds.Sections.SessionFilter.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionFilterSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="SessionFilterSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public SessionFilterSection(Section section): base(SlcWorkflowIds.Sections.SessionFilter.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.SessionFilter.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcWorkflowIds.Sections.SessionFilter.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the FilterType field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcWorkflowIds.Enums.Filtertype? FilterType
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.SessionFilter.FilterType);
                if (wrapper != null)
                {
                    return (SlcWorkflowIds.Enums.Filtertype? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.SessionFilter.FilterType);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.SessionFilter.FilterType, (Int32)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the FilterKey field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String FilterKey
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.SessionFilter.FilterKey);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.SessionFilter.FilterKey);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.SessionFilter.FilterKey, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the FilterValues field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String FilterValues
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.SessionFilter.FilterValues);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.SessionFilter.FilterValues);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.SessionFilter.FilterValues, (String)value);
                }
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a WorkflowExecutionSection section.
    /// The <see cref="WorkflowExecutionSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class WorkflowExecutionSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowExecutionSection"/> class. Creates an empty <see cref="WorkflowExecutionSection"/> object with default settings.
        /// </summary>
        public WorkflowExecutionSection(): base(SlcWorkflowIds.Sections.WorkflowExecution.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowExecutionSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="WorkflowExecutionSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public WorkflowExecutionSection(Section section): base(SlcWorkflowIds.Sections.WorkflowExecution.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.WorkflowExecution.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcWorkflowIds.Sections.WorkflowExecution.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the WorkflowExecutionScript field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String WorkflowExecutionScript
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.WorkflowExecution.WorkflowExecutionScript);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.WorkflowExecution.WorkflowExecutionScript);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.WorkflowExecution.WorkflowExecutionScript, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the WorkflowConfiguration field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? WorkflowConfiguration
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcWorkflowIds.Sections.WorkflowExecution.WorkflowConfiguration);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.WorkflowExecution.WorkflowConfiguration);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.WorkflowExecution.WorkflowConfiguration, (Guid)value);
                }
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a JobNodeRelationshipReplaceActionsSection section.
    /// The <see cref="JobNodeRelationshipReplaceActionsSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class JobNodeRelationshipReplaceActionsSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobNodeRelationshipReplaceActionsSection"/> class. Creates an empty <see cref="JobNodeRelationshipReplaceActionsSection"/> object with default settings.
        /// </summary>
        public JobNodeRelationshipReplaceActionsSection(): base(SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobNodeRelationshipReplaceActionsSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="JobNodeRelationshipReplaceActionsSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public JobNodeRelationshipReplaceActionsSection(Section section): base(SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the ReplaceAction field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcWorkflowIds.Enums.Replaceaction? ReplaceAction
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.ReplaceAction);
                if (wrapper != null)
                {
                    return (SlcWorkflowIds.Enums.Replaceaction? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.ReplaceAction);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.ReplaceAction, (Int32)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ExecutePoolLinks field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Boolean? ExecutePoolLinks
        {
            get
            {
                var wrapper = section.GetValue<Boolean>(SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.ExecutePoolLinks);
                if (wrapper != null)
                {
                    return (Boolean? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.ExecutePoolLinks);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.ExecutePoolLinks, (Boolean)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ExecuteBookingExtensionScript field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Boolean? ExecuteBookingExtensionScript
        {
            get
            {
                var wrapper = section.GetValue<Boolean>(SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.ExecuteBookingExtensionScript);
                if (wrapper != null)
                {
                    return (Boolean? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.ExecuteBookingExtensionScript);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.ExecuteBookingExtensionScript, (Boolean)value);
                }
            }
        }

        /// <inheritdoc />
        public override Section ToSection()
        {
            if (section.GetValue<Int32>(SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.ReplaceAction) == null)
                throw new InvalidOperationException("'ReplaceAction' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a ErrorsSection section.
    /// The <see cref="ErrorsSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class ErrorsSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorsSection"/> class. Creates an empty <see cref="ErrorsSection"/> object with default settings.
        /// </summary>
        public ErrorsSection(): base(SlcWorkflowIds.Sections.Errors.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorsSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="ErrorsSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public ErrorsSection(Section section): base(SlcWorkflowIds.Sections.Errors.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.Errors.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcWorkflowIds.Sections.Errors.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the ErrorCode field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String ErrorCode
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Errors.ErrorCode);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Errors.ErrorCode);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Errors.ErrorCode, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ErrorMessage field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String ErrorMessage
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Errors.ErrorMessage);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Errors.ErrorMessage);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Errors.ErrorMessage, (String)value);
                }
            }
        }

        /// <inheritdoc />
        public override Section ToSection()
        {
            if (section.GetValue<String>(SlcWorkflowIds.Sections.Errors.ErrorCode) == null)
                throw new InvalidOperationException("'ErrorCode' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            if (section.GetValue<String>(SlcWorkflowIds.Sections.Errors.ErrorMessage) == null)
                throw new InvalidOperationException("'ErrorMessage' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a MonitoringSettingsSection section.
    /// The <see cref="MonitoringSettingsSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class MonitoringSettingsSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MonitoringSettingsSection"/> class. Creates an empty <see cref="MonitoringSettingsSection"/> object with default settings.
        /// </summary>
        public MonitoringSettingsSection(): base(SlcWorkflowIds.Sections.MonitoringSettings.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitoringSettingsSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="MonitoringSettingsSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public MonitoringSettingsSection(Section section): base(SlcWorkflowIds.Sections.MonitoringSettings.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.MonitoringSettings.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcWorkflowIds.Sections.MonitoringSettings.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the AtJobStart field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcWorkflowIds.Enums.Atjobstart? AtJobStart
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.MonitoringSettings.AtJobStart);
                if (wrapper != null)
                {
                    return (SlcWorkflowIds.Enums.Atjobstart? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.MonitoringSettings.AtJobStart);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.MonitoringSettings.AtJobStart, (Int32)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the AtJobEnd field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcWorkflowIds.Enums.Atjobend? AtJobEnd
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.MonitoringSettings.AtJobEnd);
                if (wrapper != null)
                {
                    return (SlcWorkflowIds.Enums.Atjobend? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.MonitoringSettings.AtJobEnd);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.MonitoringSettings.AtJobEnd, (Int32)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the MonitoringServiceTemplate field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String MonitoringServiceTemplate
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.MonitoringSettings.MonitoringServiceTemplate);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.MonitoringSettings.MonitoringServiceTemplate);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.MonitoringSettings.MonitoringServiceTemplate, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the MonitoringServiceID field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String MonitoringServiceID
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.MonitoringSettings.MonitoringServiceID);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.MonitoringSettings.MonitoringServiceID);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.MonitoringSettings.MonitoringServiceID, (String)value);
                }
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a JobInfoSection section.
    /// The <see cref="JobInfoSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class JobInfoSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobInfoSection"/> class. Creates an empty <see cref="JobInfoSection"/> object with default settings.
        /// </summary>
        public JobInfoSection(): base(SlcWorkflowIds.Sections.JobInfo.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobInfoSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="JobInfoSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public JobInfoSection(Section section): base(SlcWorkflowIds.Sections.JobInfo.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.JobInfo.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcWorkflowIds.Sections.JobInfo.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the JobID field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String JobID
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.JobInfo.JobID);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.JobID);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.JobID, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the JobName field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String JobName
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.JobInfo.JobName);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.JobName);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.JobName, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the JobDescription field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String JobDescription
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.JobInfo.JobDescription);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.JobDescription);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.JobDescription, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Workflow field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? Workflow
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcWorkflowIds.Sections.JobInfo.Workflow);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.Workflow);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.Workflow, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the JobStatus field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? JobStatus
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcWorkflowIds.Sections.JobInfo.JobStatus);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.JobStatus);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.JobStatus, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the JobStart field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public DateTime? JobStart
        {
            get
            {
                var wrapper = section.GetValue<DateTime>(SlcWorkflowIds.Sections.JobInfo.JobStart);
                if (wrapper != null)
                {
                    return (DateTime? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.JobStart);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.JobStart, (DateTime)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the JobEnd field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public DateTime? JobEnd
        {
            get
            {
                var wrapper = section.GetValue<DateTime>(SlcWorkflowIds.Sections.JobInfo.JobEnd);
                if (wrapper != null)
                {
                    return (DateTime? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.JobEnd);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.JobEnd, (DateTime)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ApproxOutDuration field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public TimeSpan? ApproxOutDuration
        {
            get
            {
                var wrapper = section.GetValue<TimeSpan>(SlcWorkflowIds.Sections.JobInfo.ApproxOutDuration);
                if (wrapper != null)
                {
                    return (TimeSpan? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.ApproxOutDuration);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.ApproxOutDuration, (TimeSpan)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ApproxOutTime field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public DateTime? ApproxOutTime
        {
            get
            {
                var wrapper = section.GetValue<DateTime>(SlcWorkflowIds.Sections.JobInfo.ApproxOutTime);
                if (wrapper != null)
                {
                    return (DateTime? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.ApproxOutTime);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.ApproxOutTime, (DateTime)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the JobPriority field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcWorkflowIds.Enums.Jobpriority? JobPriority
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.JobInfo.JobPriority);
                if (wrapper != null)
                {
                    return (SlcWorkflowIds.Enums.Jobpriority? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.JobPriority);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.JobPriority, (Int32)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Recurrence field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? Recurrence
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcWorkflowIds.Sections.JobInfo.Recurrence);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.Recurrence);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.Recurrence, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the JobSource field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String JobSource
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.JobInfo.JobSource);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.JobSource);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.JobSource, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the JobNotes field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String JobNotes
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.JobInfo.JobNotes);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.JobNotes);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.JobNotes, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the OriginalJobStart field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public DateTime? OriginalJobStart
        {
            get
            {
                var wrapper = section.GetValue<DateTime>(SlcWorkflowIds.Sections.JobInfo.OriginalJobStart);
                if (wrapper != null)
                {
                    return (DateTime? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.OriginalJobStart);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.OriginalJobStart, (DateTime)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the OriginalJobEnd field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public DateTime? OriginalJobEnd
        {
            get
            {
                var wrapper = section.GetValue<DateTime>(SlcWorkflowIds.Sections.JobInfo.OriginalJobEnd);
                if (wrapper != null)
                {
                    return (DateTime? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.OriginalJobEnd);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.OriginalJobEnd, (DateTime)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the JobConfirmation field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public DateTime? JobConfirmation
        {
            get
            {
                var wrapper = section.GetValue<DateTime>(SlcWorkflowIds.Sections.JobInfo.JobConfirmation);
                if (wrapper != null)
                {
                    return (DateTime? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.JobConfirmation);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.JobConfirmation, (DateTime)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the JobCancellation field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public DateTime? JobCancellation
        {
            get
            {
                var wrapper = section.GetValue<DateTime>(SlcWorkflowIds.Sections.JobInfo.JobCancellation);
                if (wrapper != null)
                {
                    return (DateTime? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.JobCancellation);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.JobCancellation, (DateTime)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ActionStatus field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcWorkflowIds.Enums.Actionstatus? ActionStatus
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.JobInfo.ActionStatus);
                if (wrapper != null)
                {
                    return (SlcWorkflowIds.Enums.Actionstatus? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.ActionStatus);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.ActionStatus, (Int32)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the LockedBy field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String LockedBy
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.JobInfo.LockedBy);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.LockedBy);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.LockedBy, (String)value);
                }
            }
        }

        /// <inheritdoc />
        public override Section ToSection()
        {
            if (section.GetValue<String>(SlcWorkflowIds.Sections.JobInfo.JobName) == null)
                throw new InvalidOperationException("'JobName' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            if (section.GetValue<DateTime>(SlcWorkflowIds.Sections.JobInfo.JobStart) == null)
                throw new InvalidOperationException("'JobStart' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            if (section.GetValue<DateTime>(SlcWorkflowIds.Sections.JobInfo.JobEnd) == null)
                throw new InvalidOperationException("'JobEnd' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a JobNodeRelationshipGeneralActionsSection section.
    /// The <see cref="JobNodeRelationshipGeneralActionsSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class JobNodeRelationshipGeneralActionsSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobNodeRelationshipGeneralActionsSection"/> class. Creates an empty <see cref="JobNodeRelationshipGeneralActionsSection"/> object with default settings.
        /// </summary>
        public JobNodeRelationshipGeneralActionsSection(): base(SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobNodeRelationshipGeneralActionsSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="JobNodeRelationshipGeneralActionsSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public JobNodeRelationshipGeneralActionsSection(Section section): base(SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the Relationship field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? Relationship
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.Relationship);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.Relationship);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.Relationship, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the BookingAction field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcWorkflowIds.Enums.Bookingaction? BookingAction
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.BookingAction);
                if (wrapper != null)
                {
                    return (SlcWorkflowIds.Enums.Bookingaction? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.BookingAction);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.BookingAction, (Int32)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the DeleteAction field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcWorkflowIds.Enums.Deleteaction? DeleteAction
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.DeleteAction);
                if (wrapper != null)
                {
                    return (SlcWorkflowIds.Enums.Deleteaction? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.DeleteAction);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.DeleteAction, (Int32)value);
                }
            }
        }

        /// <inheritdoc />
        public override Section ToSection()
        {
            if (section.GetValue<Guid>(SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.Relationship) == null)
                throw new InvalidOperationException("'Relationship' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            if (section.GetValue<Int32>(SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.BookingAction) == null)
                throw new InvalidOperationException("'BookingAction' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            if (section.GetValue<Int32>(SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.DeleteAction) == null)
                throw new InvalidOperationException("'DeleteAction' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a ConnectionsSection section.
    /// The <see cref="ConnectionsSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class ConnectionsSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectionsSection"/> class. Creates an empty <see cref="ConnectionsSection"/> object with default settings.
        /// </summary>
        public ConnectionsSection(): base(SlcWorkflowIds.Sections.Connections.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectionsSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="ConnectionsSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public ConnectionsSection(Section section): base(SlcWorkflowIds.Sections.Connections.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.Connections.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcWorkflowIds.Sections.Connections.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the ConnectionID field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String ConnectionID
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Connections.ConnectionID);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Connections.ConnectionID);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Connections.ConnectionID, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the SourceNodeID field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String SourceNodeID
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Connections.SourceNodeID);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Connections.SourceNodeID);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Connections.SourceNodeID, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the DestinationNodeID field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String DestinationNodeID
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Connections.DestinationNodeID);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Connections.DestinationNodeID);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Connections.DestinationNodeID, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ConnectionAlias field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String ConnectionAlias
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Connections.ConnectionAlias);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Connections.ConnectionAlias);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Connections.ConnectionAlias, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ConnectionExecutionOrder field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Int64? ConnectionExecutionOrder
        {
            get
            {
                var wrapper = section.GetValue<Int64>(SlcWorkflowIds.Sections.Connections.ConnectionExecutionOrder);
                if (wrapper != null)
                {
                    return (Int64? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Connections.ConnectionExecutionOrder);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Connections.ConnectionExecutionOrder, (Int64)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ConnectionType field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcWorkflowIds.Enums.Connectiontype? ConnectionType
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.Connections.ConnectionType);
                if (wrapper != null)
                {
                    return (SlcWorkflowIds.Enums.Connectiontype? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Connections.ConnectionType);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Connections.ConnectionType, (Int32)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ConnectionSubtype field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcWorkflowIds.Enums.Connectionsubtype? ConnectionSubtype
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.Connections.ConnectionSubtype);
                if (wrapper != null)
                {
                    return (SlcWorkflowIds.Enums.Connectionsubtype? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Connections.ConnectionSubtype);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Connections.ConnectionSubtype, (Int32)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the PredefinedSubset field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcWorkflowIds.Enums.Predefinedsubset? PredefinedSubset
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.Connections.PredefinedSubset);
                if (wrapper != null)
                {
                    return (SlcWorkflowIds.Enums.Predefinedsubset? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Connections.PredefinedSubset);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Connections.PredefinedSubset, (Int32)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ConnectionDetails field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String ConnectionDetails
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Connections.ConnectionDetails);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Connections.ConnectionDetails);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Connections.ConnectionDetails, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ConnectionExecutionScript field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String ConnectionExecutionScript
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Connections.ConnectionExecutionScript);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Connections.ConnectionExecutionScript);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Connections.ConnectionExecutionScript, (String)value);
                }
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a JobSettingsSection section.
    /// The <see cref="JobSettingsSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class JobSettingsSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobSettingsSection"/> class. Creates an empty <see cref="JobSettingsSection"/> object with default settings.
        /// </summary>
        public JobSettingsSection(): base(SlcWorkflowIds.Sections.JobSettings.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobSettingsSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="JobSettingsSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public JobSettingsSection(Section section): base(SlcWorkflowIds.Sections.JobSettings.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.JobSettings.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcWorkflowIds.Sections.JobSettings.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the JobIDPrefix field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String JobIDPrefix
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.JobSettings.JobIDPrefix);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobSettings.JobIDPrefix);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobSettings.JobIDPrefix, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the JobIDMinimumDigits field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Int64? JobIDMinimumDigits
        {
            get
            {
                var wrapper = section.GetValue<Int64>(SlcWorkflowIds.Sections.JobSettings.JobIDMinimumDigits);
                if (wrapper != null)
                {
                    return (Int64? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobSettings.JobIDMinimumDigits);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobSettings.JobIDMinimumDigits, (Int64)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the JobIDStartingSeed field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Int64? JobIDStartingSeed
        {
            get
            {
                var wrapper = section.GetValue<Int64>(SlcWorkflowIds.Sections.JobSettings.JobIDStartingSeed);
                if (wrapper != null)
                {
                    return (Int64? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobSettings.JobIDStartingSeed);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobSettings.JobIDStartingSeed, (Int64)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the JobIDIncrement field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Int64? JobIDIncrement
        {
            get
            {
                var wrapper = section.GetValue<Int64>(SlcWorkflowIds.Sections.JobSettings.JobIDIncrement);
                if (wrapper != null)
                {
                    return (Int64? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobSettings.JobIDIncrement);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobSettings.JobIDIncrement, (Int64)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the JobIDNextSequence field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Int64? JobIDNextSequence
        {
            get
            {
                var wrapper = section.GetValue<Int64>(SlcWorkflowIds.Sections.JobSettings.JobIDNextSequence);
                if (wrapper != null)
                {
                    return (Int64? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobSettings.JobIDNextSequence);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobSettings.JobIDNextSequence, (Int64)value);
                }
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a RecurrenceDetailsSection section.
    /// The <see cref="RecurrenceDetailsSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class RecurrenceDetailsSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecurrenceDetailsSection"/> class. Creates an empty <see cref="RecurrenceDetailsSection"/> object with default settings.
        /// </summary>
        public RecurrenceDetailsSection(): base(SlcWorkflowIds.Sections.RecurrenceDetails.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecurrenceDetailsSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="RecurrenceDetailsSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public RecurrenceDetailsSection(Section section): base(SlcWorkflowIds.Sections.RecurrenceDetails.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.RecurrenceDetails.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcWorkflowIds.Sections.RecurrenceDetails.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the StartTime field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public DateTime? StartTime
        {
            get
            {
                var wrapper = section.GetValue<DateTime>(SlcWorkflowIds.Sections.RecurrenceDetails.StartTime);
                if (wrapper != null)
                {
                    return (DateTime? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.RecurrenceDetails.StartTime);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.RecurrenceDetails.StartTime, (DateTime)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the EndTime field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public DateTime? EndTime
        {
            get
            {
                var wrapper = section.GetValue<DateTime>(SlcWorkflowIds.Sections.RecurrenceDetails.EndTime);
                if (wrapper != null)
                {
                    return (DateTime? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.RecurrenceDetails.EndTime);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.RecurrenceDetails.EndTime, (DateTime)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Type field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcWorkflowIds.Enums.Type? Type
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.RecurrenceDetails.Type);
                if (wrapper != null)
                {
                    return (SlcWorkflowIds.Enums.Type? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.RecurrenceDetails.Type);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.RecurrenceDetails.Type, (Int32)value);
                }
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a NodesSection section.
    /// The <see cref="NodesSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class NodesSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NodesSection"/> class. Creates an empty <see cref="NodesSection"/> object with default settings.
        /// </summary>
        public NodesSection(): base(SlcWorkflowIds.Sections.Nodes.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NodesSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="NodesSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public NodesSection(Section section): base(SlcWorkflowIds.Sections.Nodes.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.Nodes.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcWorkflowIds.Sections.Nodes.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the NodeID field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String NodeID
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Nodes.NodeID);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.NodeID);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.NodeID, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the NodeAlias field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String NodeAlias
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Nodes.NodeAlias);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.NodeAlias);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.NodeAlias, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the NodeType field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcWorkflowIds.Enums.Nodetype? NodeType
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.Nodes.NodeType);
                if (wrapper != null)
                {
                    return (SlcWorkflowIds.Enums.Nodetype? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.NodeType);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.NodeType, (Int32)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the NodeReferenceID field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String NodeReferenceID
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Nodes.NodeReferenceID);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.NodeReferenceID);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.NodeReferenceID, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the NodeParentReferenceID field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String NodeParentReferenceID
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Nodes.NodeParentReferenceID);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.NodeParentReferenceID);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.NodeParentReferenceID, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the NodeIcon field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String NodeIcon
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Nodes.NodeIcon);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.NodeIcon);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.NodeIcon, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the AutomaticConfiguration field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Boolean? AutomaticConfiguration
        {
            get
            {
                var wrapper = section.GetValue<Boolean>(SlcWorkflowIds.Sections.Nodes.AutomaticConfiguration);
                if (wrapper != null)
                {
                    return (Boolean? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.AutomaticConfiguration);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.AutomaticConfiguration, (Boolean)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ConfigurationParameters field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String ConfigurationParameters
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Nodes.ConfigurationParameters);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.ConfigurationParameters);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.ConfigurationParameters, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the AdHocControlScript field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String AdHocControlScript
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Nodes.AdHocControlScript);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.AdHocControlScript);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.AdHocControlScript, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the VisualizationOrder field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Int64? VisualizationOrder
        {
            get
            {
                var wrapper = section.GetValue<Int64>(SlcWorkflowIds.Sections.Nodes.VisualizationOrder);
                if (wrapper != null)
                {
                    return (Int64? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.VisualizationOrder);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.VisualizationOrder, (Int64)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the NodeConfigurationExecutionOrder field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Int64? NodeConfigurationExecutionOrder
        {
            get
            {
                var wrapper = section.GetValue<Int64>(SlcWorkflowIds.Sections.Nodes.NodeConfigurationExecutionOrder);
                if (wrapper != null)
                {
                    return (Int64? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.NodeConfigurationExecutionOrder);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.NodeConfigurationExecutionOrder, (Int64)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ManualConfigurationComplete field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Boolean? ManualConfigurationComplete
        {
            get
            {
                var wrapper = section.GetValue<Boolean>(SlcWorkflowIds.Sections.Nodes.ManualConfigurationComplete);
                if (wrapper != null)
                {
                    return (Boolean? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.ManualConfigurationComplete);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.ManualConfigurationComplete, (Boolean)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ReserveNode field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Boolean? ReserveNode
        {
            get
            {
                var wrapper = section.GetValue<Boolean>(SlcWorkflowIds.Sections.Nodes.ReserveNode);
                if (wrapper != null)
                {
                    return (Boolean? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.ReserveNode);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.ReserveNode, (Boolean)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Hidden field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Boolean? Hidden
        {
            get
            {
                var wrapper = section.GetValue<Boolean>(SlcWorkflowIds.Sections.Nodes.Hidden);
                if (wrapper != null)
                {
                    return (Boolean? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.Hidden);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.Hidden, (Boolean)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the CapabilityRequirements field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String CapabilityRequirements
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Nodes.CapabilityRequirements);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.CapabilityRequirements);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.CapabilityRequirements, (String)value);
                }
            }
        }

        [Obsolete("The FieldDescriptor, this property represents, is marked as SoftDeleted, in the SectionDefinition.")]
        /// <summary>
        /// Gets the CapacityRequirements field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// </remarks>
        public String CapacityRequirements
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Nodes.CapacityRequirements);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }
        }

        /// <summary>
        /// Gets or sets the NodeStartTime field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public DateTime? NodeStartTime
        {
            get
            {
                var wrapper = section.GetValue<DateTime>(SlcWorkflowIds.Sections.Nodes.NodeStartTime);
                if (wrapper != null)
                {
                    return (DateTime? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.NodeStartTime);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.NodeStartTime, (DateTime)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the NodeEndTime field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public DateTime? NodeEndTime
        {
            get
            {
                var wrapper = section.GetValue<DateTime>(SlcWorkflowIds.Sections.Nodes.NodeEndTime);
                if (wrapper != null)
                {
                    return (DateTime? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.NodeEndTime);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.NodeEndTime, (DateTime)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the LinkedBookingIds field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String LinkedBookingIds
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Nodes.LinkedBookingIds);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.LinkedBookingIds);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.LinkedBookingIds, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ResourceSelectMode field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcWorkflowIds.Enums.Resourceselectmode? ResourceSelectMode
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.Nodes.ResourceSelectMode);
                if (wrapper != null)
                {
                    return (SlcWorkflowIds.Enums.Resourceselectmode? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.ResourceSelectMode);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.ResourceSelectMode, (Int32)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ResourceSelectState field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcWorkflowIds.Enums.Resourceselectstate? ResourceSelectState
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.Nodes.ResourceSelectState);
                if (wrapper != null)
                {
                    return (SlcWorkflowIds.Enums.Resourceselectstate? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.ResourceSelectState);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.ResourceSelectState, (Int32)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Billable field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Boolean? Billable
        {
            get
            {
                var wrapper = section.GetValue<Boolean>(SlcWorkflowIds.Sections.Nodes.Billable);
                if (wrapper != null)
                {
                    return (Boolean? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.Billable);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.Billable, (Boolean)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the NodeConfiguration field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? NodeConfiguration
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcWorkflowIds.Sections.Nodes.NodeConfiguration);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.NodeConfiguration);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.NodeConfiguration, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the NodeConfigurationStatus field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcWorkflowIds.Enums.Nodeconfigurationstatus? NodeConfigurationStatus
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.Nodes.NodeConfigurationStatus);
                if (wrapper != null)
                {
                    return (SlcWorkflowIds.Enums.Nodeconfigurationstatus? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.NodeConfigurationStatus);
                }
                else
                {
                    section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.NodeConfigurationStatus, (Int32)value);
                }
            }
        }
    }
}
