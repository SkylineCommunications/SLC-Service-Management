//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Dom Editor automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.SlcPeople_Organizations
{
    using System;
    using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
    using Skyline.DataMiner.Net.Sections;

    public static class SlcPeople_OrganizationsIds
    {
        public const string ModuleId = "(slc)people_organizations";
        public static class Enums
        {
            public enum Country_1ace7be9
            {
                Afghanistan = 0,
                Albania = 1,
                Algeria = 2,
                Andorra = 3,
                Angola = 4,
                AntiguaAndBarbuda = 5,
                Argentina = 6,
                Armenia = 7,
                Australia = 8,
                Austria = 9,
                Azerbaijan = 10,
                Bahamas = 11,
                Bahrain = 12,
                Bangladesh = 13,
                Barbados = 14,
                Belarus = 15,
                Belgium = 16,
                Belize = 17,
                Benin = 18,
                Bhutan = 19,
                Bolivia = 20,
                BosniaAndHerzegovina = 21,
                Botswana = 22,
                Brazil = 23,
                Brunei = 24,
                Bulgaria = 25,
                BurkinaFaso = 26,
                Burundi = 27,
                CôteDIvoire = 28,
                CaboVerde = 29,
                Cambodia = 30,
                Cameroon = 31,
                Canada = 32,
                CentralAfricanRepublic = 33,
                Chad = 34,
                Chile = 35,
                China = 36,
                Colombia = 37,
                Comoros = 38,
                CongoCongoBrazzaville = 39,
                CostaRica = 40,
                Croatia = 41,
                Cuba = 42,
                Cyprus = 43,
                CzechiaCzechRepublic = 44,
                DemocraticRepublicOfTheCongo = 45,
                Denmark = 46,
                Djibouti = 47,
                Dominica = 48,
                DominicanRepublic = 49,
                Ecuador = 50,
                Egypt = 51,
                ElSalvador = 52,
                EquatorialGuinea = 53,
                Eritrea = 54,
                Estonia = 55,
                EswatiniFmrSwaziland = 56,
                Ethiopia = 57,
                Fiji = 58,
                Finland = 59,
                France = 60,
                Gabon = 61,
                Gambia = 62,
                Georgia = 63,
                Germany = 64,
                Ghana = 65,
                Greece = 66,
                Grenada = 67,
                Guatemala = 68,
                Guinea = 69,
                GuineaBissau = 70,
                Guyana = 71,
                Haiti = 72,
                HolySee = 73,
                Honduras = 74,
                Hungary = 75,
                Iceland = 76,
                India = 77,
                Indonesia = 78,
                Iran = 79,
                Iraq = 80,
                Ireland = 81,
                Israel = 82,
                Italy = 83,
                Jamaica = 84,
                Japan = 85,
                Jordan = 86,
                Kazakhstan = 87,
                Kenya = 88,
                Kiribati = 89,
                Kuwait = 90,
                Kyrgyzstan = 91,
                Laos = 92,
                Latvia = 93,
                Lebanon = 94,
                Lesotho = 95,
                Liberia = 96,
                Libya = 97,
                Liechtenstein = 98,
                Lithuania = 99,
                Luxembourg = 100,
                Madagascar = 101,
                Malawi = 102,
                Malaysia = 103,
                Maldives = 104,
                Mali = 105,
                Malta = 106,
                MarshallIslands = 107,
                Mauritania = 108,
                Mauritius = 109,
                Mexico = 110,
                Micronesia = 111,
                Moldova = 112,
                Monaco = 113,
                Mongolia = 114,
                Montenegro = 115,
                Morocco = 116,
                Mozambique = 117,
                MyanmarFormerlyBurma = 118,
                Namibia = 119,
                Nauru = 120,
                Nepal = 121,
                Netherlands = 122,
                NewZealand = 123,
                Nicaragua = 124,
                Niger = 125,
                Nigeria = 126,
                NorthKorea = 127,
                NorthMacedonia = 128,
                Norway = 129,
                Oman = 130,
                Pakistan = 131,
                Palau = 132,
                PalestineState = 133,
                Panama = 134,
                PapuaNewGuinea = 135,
                Paraguay = 136,
                Peru = 137,
                Philippines = 138,
                Poland = 139,
                Portugal = 140,
                Qatar = 141,
                Romania = 142,
                Russia = 143,
                Rwanda = 144,
                SaintKittsAndNevis = 145,
                SaintLucia = 146,
                SaintVincentAndTheGrenadines = 147,
                Samoa = 148,
                SanMarino = 149,
                SaoTomeAndPrincipe = 150,
                SaudiArabia = 151,
                Senegal = 152,
                Serbia = 153,
                Seychelles = 154,
                SierraLeone = 155,
                Singapore = 156,
                Slovakia = 157,
                Slovenia = 158,
                SolomonIslands = 159,
                Somalia = 160,
                SouthAfrica = 161,
                SouthKorea = 162,
                SouthSudan = 163,
                Spain = 164,
                SriLanka = 165,
                Sudan = 166,
                Suriname = 167,
                Sweden = 168,
                Switzerland = 169,
                Syria = 170,
                Tajikistan = 171,
                Tanzania = 172,
                Thailand = 173,
                TimorLeste = 174,
                Togo = 175,
                Tonga = 176,
                TrinidadAndTobago = 177,
                Tunisia = 178,
                Turkey = 179,
                Turkmenistan = 180,
                Tuvalu = 181,
                Uganda = 182,
                Ukraine = 183,
                UnitedArabEmirates = 184,
                UnitedKingdom = 185,
                UnitedStatesOfAmerica = 186,
                Uruguay = 187,
                Uzbekistan = 188,
                Vanuatu = 189,
                Venezuela = 190,
                Vietnam = 191,
                Yemen = 192,
                Zambia = 193,
                Zimbabwe = 194
            }

            public enum Country_7f58452b
            {
                Afghanistan = 0,
                Albania = 1,
                Algeria = 2,
                Andorra = 3,
                Angola = 4,
                AntiguaAndBarbuda = 5,
                Argentina = 6,
                Armenia = 7,
                Australia = 8,
                Austria = 9,
                Azerbaijan = 10,
                Bahamas = 11,
                Bahrain = 12,
                Bangladesh = 13,
                Barbados = 14,
                Belarus = 15,
                Belgium = 16,
                Belize = 17,
                Benin = 18,
                Bhutan = 19,
                Bolivia = 20,
                BosniaAndHerzegovina = 21,
                Botswana = 22,
                Brazil = 23,
                Brunei = 24,
                Bulgaria = 25,
                BurkinaFaso = 26,
                Burundi = 27,
                CôteDIvoire = 28,
                CaboVerde = 29,
                Cambodia = 30,
                Cameroon = 31,
                Canada = 32,
                CentralAfricanRepublic = 33,
                Chad = 34,
                Chile = 35,
                China = 36,
                Colombia = 37,
                Comoros = 38,
                CongoCongoBrazzaville = 39,
                CostaRica = 40,
                Croatia = 41,
                Cuba = 42,
                Cyprus = 43,
                CzechiaCzechRepublic = 44,
                DemocraticRepublicOfTheCongo = 45,
                Denmark = 46,
                Djibouti = 47,
                Dominica = 48,
                DominicanRepublic = 49,
                Ecuador = 50,
                Egypt = 51,
                ElSalvador = 52,
                EquatorialGuinea = 53,
                Eritrea = 54,
                Estonia = 55,
                EswatiniFmrSwaziland = 56,
                Ethiopia = 57,
                Fiji = 58,
                Finland = 59,
                France = 60,
                Gabon = 61,
                Gambia = 62,
                Georgia = 63,
                Germany = 64,
                Ghana = 65,
                Greece = 66,
                Grenada = 67,
                Guatemala = 68,
                Guinea = 69,
                GuineaBissau = 70,
                Guyana = 71,
                Haiti = 72,
                HolySee = 73,
                Honduras = 74,
                Hungary = 75,
                Iceland = 76,
                India = 77,
                Indonesia = 78,
                Iran = 79,
                Iraq = 80,
                Ireland = 81,
                Israel = 82,
                Italy = 83,
                Jamaica = 84,
                Japan = 85,
                Jordan = 86,
                Kazakhstan = 87,
                Kenya = 88,
                Kiribati = 89,
                Kuwait = 90,
                Kyrgyzstan = 91,
                Laos = 92,
                Latvia = 93,
                Lebanon = 94,
                Lesotho = 95,
                Liberia = 96,
                Libya = 97,
                Liechtenstein = 98,
                Lithuania = 99,
                Luxembourg = 100,
                Madagascar = 101,
                Malawi = 102,
                Malaysia = 103,
                Maldives = 104,
                Mali = 105,
                Malta = 106,
                MarshallIslands = 107,
                Mauritania = 108,
                Mauritius = 109,
                Mexico = 110,
                Micronesia = 111,
                Moldova = 112,
                Monaco = 113,
                Mongolia = 114,
                Montenegro = 115,
                Morocco = 116,
                Mozambique = 117,
                MyanmarFormerlyBurma = 118,
                Namibia = 119,
                Nauru = 120,
                Nepal = 121,
                Netherlands = 122,
                NewZealand = 123,
                Nicaragua = 124,
                Niger = 125,
                Nigeria = 126,
                NorthKorea = 127,
                NorthMacedonia = 128,
                Norway = 129,
                Oman = 130,
                Pakistan = 131,
                Palau = 132,
                PalestineState = 133,
                Panama = 134,
                PapuaNewGuinea = 135,
                Paraguay = 136,
                Peru = 137,
                Philippines = 138,
                Poland = 139,
                Portugal = 140,
                Qatar = 141,
                Romania = 142,
                Russia = 143,
                Rwanda = 144,
                SaintKittsAndNevis = 145,
                SaintLucia = 146,
                SaintVincentAndTheGrenadines = 147,
                Samoa = 148,
                SanMarino = 149,
                SaoTomeAndPrincipe = 150,
                SaudiArabia = 151,
                Senegal = 152,
                Serbia = 153,
                Seychelles = 154,
                SierraLeone = 155,
                Singapore = 156,
                Slovakia = 157,
                Slovenia = 158,
                SolomonIslands = 159,
                Somalia = 160,
                SouthAfrica = 161,
                SouthKorea = 162,
                SouthSudan = 163,
                Spain = 164,
                SriLanka = 165,
                Sudan = 166,
                Suriname = 167,
                Sweden = 168,
                Switzerland = 169,
                Syria = 170,
                Tajikistan = 171,
                Tanzania = 172,
                Thailand = 173,
                TimorLeste = 174,
                Togo = 175,
                Tonga = 176,
                TrinidadAndTobago = 177,
                Tunisia = 178,
                Turkey = 179,
                Turkmenistan = 180,
                Tuvalu = 181,
                Uganda = 182,
                Ukraine = 183,
                UnitedArabEmirates = 184,
                UnitedKingdom = 185,
                UnitedStatesOfAmerica = 186,
                Uruguay = 187,
                Uzbekistan = 188,
                Vanuatu = 189,
                Venezuela = 190,
                Vietnam = 191,
                Yemen = 192,
                Zambia = 193,
                Zimbabwe = 194
            }
        }

        public static class Sections
        {
            public static class ExpertiseInformation
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("3094e417-cdf2-4dd3-9d3f-0c584bf8aa8a"))
                {ModuleId = "(slc)people_organizations"};
                public static FieldDescriptorID Expertise
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("e79b6074-b318-4feb-a96a-9cc22e133a44"));
            }

            public static class Contracts
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("21ffec53-130a-4a66-9eb3-50194d2c1e43"))
                {ModuleId = "(slc)people_organizations"};
                public static FieldDescriptorID Contract
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("a12295ee-465e-4b0a-9152-4ed92d4f1508"));
                public static FieldDescriptorID BillTo
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("a7605cf1-74df-4f38-b8a6-3e463aa60371"));
            }

            public static class Collaboration
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("57f9a298-7451-4037-a0e2-ecfabe4b22ab"))
                {ModuleId = "(slc)people_organizations"};
                public static FieldDescriptorID CreateMSTeamsChannel
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("a8d676e3-c774-4822-81bf-83e3ceb7a1b3"));
                public static FieldDescriptorID CreateMSTeam
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("c1eb12d6-1ea5-4a6e-8e34-95a4c0de46fe"));
                public static FieldDescriptorID MSTeamName
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("b4af8f25-6eb5-4907-a12c-47e89ac07837"));
                public static FieldDescriptorID ChannelId
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("db91af67-8bb9-47d9-b47a-e5f940fb35f9"));
                public static FieldDescriptorID TeamId
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("f484e928-32b8-40c3-953a-5debea00419d"));
            }

            public static class Organization
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("397134f8-19eb-4eec-9021-8b1af51d0c1b"))
                {ModuleId = "(slc)people_organizations"};
                public static FieldDescriptorID Organization_57695f03
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("57695f03-2643-4303-82f5-8164291747f3"));
            }

            public static class SkillInformation
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("dab87e2a-241f-4305-b68d-73a5707dcb76"))
                {ModuleId = "(slc)people_organizations"};
                public static FieldDescriptorID Skill
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("a6917abc-ab82-44d2-8a3f-293eecf5328f"));
            }

            public static class RoleInformation
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("03ba0fd8-114a-4f97-b392-7ac8a1f76803"))
                {ModuleId = "(slc)people_organizations"};
                public static FieldDescriptorID Role
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("4f63fdbd-a40c-482f-b8ff-8b20c701b481"));
            }

            public static class ResourcePool
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("8341db0f-59bf-4a71-a124-67f8c5fbbb06"))
                {ModuleId = "(slc)people_organizations"};
                public static FieldDescriptorID LinkedResourcePool
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("73a606b5-fd80-4ea0-819d-5a3b8de60323"));
            }

            public static class ContactInfo
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("fcf83fa0-0d38-4fe6-ad55-4d36e4457f91"))
                {ModuleId = "(slc)people_organizations"};
                public static FieldDescriptorID Email
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("cf8ae3ad-a363-499b-b99c-8ffcabcb5abb"));
                public static FieldDescriptorID Phone
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("2f683912-7e68-4fa3-862f-5e71ad7d1633"));
                public static FieldDescriptorID StreetAddress
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("05096697-68b8-4082-b9ec-d77b709377ea"));
                public static FieldDescriptorID City
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("dd2dcc95-0540-4e01-880b-1d57d5bb9f24"));
                public static FieldDescriptorID Country
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("1ace7be9-0d34-4d3a-a6f4-fb9c79adc199"));
                public static FieldDescriptorID ZIP
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("8477ba67-09c2-49af-9743-9e43ce08228a"));
            }

            public static class ExperienceInformation
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("5c4be963-44ea-4ae2-911f-164f92534cb1"))
                {ModuleId = "(slc)people_organizations"};
                public static FieldDescriptorID Experience
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("065992de-67f1-4d34-b470-759e5b64b088"));
            }

            public static class CategoryInformation
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("e47d729d-1658-41bc-8931-88f4c055b955"))
                {ModuleId = "(slc)people_organizations"};
                public static FieldDescriptorID Category
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("c86376b4-c309-4d08-8b0e-83ec69809d58"));
            }

            public static class Team
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("30aef0e9-658a-436a-ad71-6a48d88faa0b"))
                {ModuleId = "(slc)people_organizations"};
                public static FieldDescriptorID Team_144d3379
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("144d3379-1393-47ca-a35a-0facc9cf4127"));
                public static FieldDescriptorID TeamRole
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("444f1e2e-4a66-49af-9a94-07d4783324ec"));
            }

            public static class OrganizationInformation
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("141a95ca-4b5b-4086-b329-209ffe8f1af8"))
                {ModuleId = "(slc)people_organizations"};
                public static FieldDescriptorID OrganizationName
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("88b88d71-b123-4f56-8aae-a40df08ac875"));
                public static FieldDescriptorID Category
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("ff3ed352-de62-4a1f-ad03-303b4778585e"));
                public static FieldDescriptorID Icon
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("b4a4365f-6148-46ac-be62-31a3d49a1a7f"));
            }

            public static class TeamInformation
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("b4abf511-028c-42c1-b0d0-dc750043f1d2"))
                {ModuleId = "(slc)people_organizations"};
                public static FieldDescriptorID TeamName
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("33d47f2a-8e2d-4bbf-93e4-d478208f8678"));
                public static FieldDescriptorID TeamEmail
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("7c2bd233-8e15-459b-9f24-55ed80e904b9"));
                public static FieldDescriptorID TeamDescription
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("25bf4968-ee66-4443-9e8a-8df5d7355b12"));
                public static FieldDescriptorID TeamExpertiseS
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("c6a22574-2b96-4cdd-b357-1c7ed221f797"));
                public static FieldDescriptorID Bookable
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("9b79a28d-fb4c-4ca4-9a97-ac8b1353ffc3"));
                public static FieldDescriptorID Icon
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("0100b348-bfd0-47df-972c-10f46222e2cc"));
            }

            public static class Resource
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("ceadbd12-73f7-474e-9d1f-effbc9d81684"))
                {ModuleId = "(slc)people_organizations"};
                public static FieldDescriptorID LinkedResource
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("6339a363-ec0f-42bb-86aa-4858e984b7d8"));
            }

            public static class Billing
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("0c47b6fe-c60f-4378-a85c-3f98dc431828"))
                {ModuleId = "(slc)people_organizations"};
                public static FieldDescriptorID Email
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("2c15790f-bc55-4170-a010-2b04bc0c0477"));
                public static FieldDescriptorID Phone
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("af20db8c-f972-47eb-8fb2-761cbfce58e9"));
                public static FieldDescriptorID StreetAddress
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("7bb6ce04-3298-4bfa-b70f-0b84735900f8"));
                public static FieldDescriptorID City
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("d72e8805-d539-42ca-8553-4aaa0b2267e9"));
                public static FieldDescriptorID Zip
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("ba7f898d-80a1-4c2a-a5c0-b7fe591535e2"));
                public static FieldDescriptorID Country
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("7f58452b-df20-4e58-927e-be9533d6f15f"));
            }

            public static class PeopleInformation
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("f38e6d21-e481-4348-b639-445a510592ec"))
                {ModuleId = "(slc)people_organizations"};
                public static FieldDescriptorID FullName
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("a7fc4201-9af5-4b29-a9b8-df24d6334d08"));
                public static FieldDescriptorID PersonalSkills
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("42ffa004-0729-44b3-a864-14cc0fc5fab4"));
                public static FieldDescriptorID ExperienceLevel
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("de319ab8-ea47-42cd-a674-c47762ca24f9"));
                public static FieldDescriptorID ProfileImage
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("aeb3be52-849a-41d6-afc9-c6c53ef38097"));
            }
        }

        public static class Definitions
        {
            public static DomDefinitionId Experience
            {
                get;
            }

            = new DomDefinitionId(new Guid("6474a13e-3de9-42f8-b3d9-aa49a1fcab7d"))
            {ModuleId = "(slc)people_organizations"};
            public static DomDefinitionId Skills
            {
                get;
            }

            = new DomDefinitionId(new Guid("c256ee85-1d66-4ae2-b456-89114481f2cf"))
            {ModuleId = "(slc)people_organizations"};
            public static DomDefinitionId Category
            {
                get;
            }

            = new DomDefinitionId(new Guid("bc1fe15f-a85d-4601-ab26-0329a9acf61a"))
            {ModuleId = "(slc)people_organizations"};
            public static DomDefinitionId Role
            {
                get;
            }

            = new DomDefinitionId(new Guid("86b3dff8-764e-4378-9d19-de4bc8de05c2"))
            {ModuleId = "(slc)people_organizations"};
            public static DomDefinitionId Expertises
            {
                get;
            }

            = new DomDefinitionId(new Guid("3ffda1a5-233c-456d-bcc7-1fd18f2468f5"))
            {ModuleId = "(slc)people_organizations"};
            public static DomDefinitionId People
            {
                get;
            }

            = new DomDefinitionId(new Guid("1624a01d-de2e-4c36-849c-3ee048a971ee"))
            {ModuleId = "(slc)people_organizations"};
            public static DomDefinitionId Teams
            {
                get;
            }

            = new DomDefinitionId(new Guid("5150bc87-7e63-4b41-a839-64da947a1986"))
            {ModuleId = "(slc)people_organizations"};
            public static DomDefinitionId Organizations
            {
                get;
            }

            = new DomDefinitionId(new Guid("c769a960-e401-4cb6-8099-b0563b270c52"))
            {ModuleId = "(slc)people_organizations"};
        }

        public static class Behaviors
        {
            public static class People_Behavior
            {
                public static DomBehaviorDefinitionId Id
                {
                    get;
                }

                = new DomBehaviorDefinitionId(new Guid("1636e21e-f44d-4343-8a09-c09780399c74"))
                {ModuleId = "(slc)people_organizations"};
                public static class Statuses
                {
                    public const string Draft = "6dff1f60-7dd0-4f5b-90c4-9d57d016837f";
                    public const string Active = "a24206da-82e0-4d6e-919a-480ecbaf69be";
                    public const string Deprecated = "ac9a7d7c-a7e9-4f95-a901-83011c3e2c32";
                    public const string Edit = "b054b3c5-1b2e-4330-9e05-7229a1940fd3";
                }

                public static class Transitions
                {
                    public const string Draft_To_Active = "draft_to_active";
                    public const string Active_To_Deprecated = "active_to_deprecated";
                    public const string Active_To_Edit = "active_to_edit";
                    public const string Edit_To_Active = "edit_to_active";
                }

                public static class Actions
                {
                    public const string Confirm = "confirm";
                    public const string Archive = "archive";
                    public const string Edit = "edit";
                }
            }

            public static class Team_Behavior
            {
                public static DomBehaviorDefinitionId Id
                {
                    get;
                }

                = new DomBehaviorDefinitionId(new Guid("a7b03edc-0a89-4f02-9fa3-5458cd11d43e"))
                {ModuleId = "(slc)people_organizations"};
                public static class Statuses
                {
                    public const string Draft = "62a27e81-5dd2-44f4-b381-3071c16d0469";
                    public const string Active = "ee06eef1-8e3a-444d-a0d3-adc44b1993e1";
                    public const string Deprecated = "d9dff92b-4fd2-4e63-b238-2f102d734378";
                    public const string Edit = "e78b3fd0-d82e-4cd2-ae2a-12a9792644fe";
                }

                public static class Transitions
                {
                    public const string Draft_To_Active = "draft_to_active";
                    public const string Active_To_Deprecated = "active_to_deprecated";
                    public const string Active_To_Edit = "active_to_edit";
                    public const string Edit_To_Active = "edit_to_active";
                }

                public static class Actions
                {
                    public const string Confirm = "confirm";
                    public const string Edit = "edit";
                    public const string Archive = "archive";
                }
            }

            public static class Organizations_Behavior
            {
                public static DomBehaviorDefinitionId Id
                {
                    get;
                }

                = new DomBehaviorDefinitionId(new Guid("80136b8f-4c76-4b7c-a1dc-526d3a9bdf5a"))
                {ModuleId = "(slc)people_organizations"};
                public static class Statuses
                {
                    public const string Draft = "d30e85a3-c1f3-47c4-acab-1f10bd9b6183";
                    public const string Active = "1957a4b0-e265-4dca-a304-4c0911f8a4a4";
                    public const string Deprecated = "c2f1fcf9-9697-4b80-8260-4e07fcbdb4a4";
                    public const string Edit = "ff1ad67d-7d01-4f32-8161-724995cc88fe";
                }

                public static class Transitions
                {
                    public const string Draft_To_Active = "draft_to_active";
                    public const string Active_To_Deprecated = "active_to_deprecated";
                    public const string Active_To_Edit = "active_to_edit";
                    public const string Edit_To_Active = "edit_to_active";
                }

                public static class Actions
                {
                    public const string Confirm = "confirm";
                    public const string Edit = "edit";
                    public const string Archive = "archive";
                }
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Dom Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.SlcPeople_Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
    using Skyline.DataMiner.Net.Messages;

    /// <summary>
    /// Represents a wrapper class for accessing a ExperienceInstance DOM instance.
    /// The <see cref="ExperienceInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class ExperienceInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExperienceInstance"/> class. Creates an empty <see cref="ExperienceInstance"/> instance with default settings.
        /// </summary>
        public ExperienceInstance(): base(SlcPeople_OrganizationsIds.Definitions.Experience)
        {
            InitializeProperties();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExperienceInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="ExperienceInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public ExperienceInstance(DomInstance domInstance): base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcPeople_OrganizationsIds.Definitions.Experience))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcPeople_OrganizationsIds.Definitions.Experience)}'", nameof(domInstance));
            InitializeProperties();
        }

        /// <summary>
        /// Gets or sets the ExperienceInformation section of the DOM Instance.
        /// </summary>
        public ExperienceInformationSection ExperienceInformation
        {
            get;
            set;
        }

        public static explicit operator ExperienceInstance(DomInstance instance)
        {
            return new ExperienceInstance(instance);
        }

        /// <inheritdoc />
        public override DomInstance ToInstance()
        {
            domInstance.Sections.Clear();
            domInstance.Sections.Add(ExperienceInformation.ToSection());
            return domInstance;
        }

        /// <inheritdoc />
        public override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected override void InitializeProperties()
        {
            ExperienceInformation = new ExperienceInformationSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.ExperienceInformation.Id)));
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a SkillsInstance DOM instance.
    /// The <see cref="SkillsInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class SkillsInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SkillsInstance"/> class. Creates an empty <see cref="SkillsInstance"/> instance with default settings.
        /// </summary>
        public SkillsInstance(): base(SlcPeople_OrganizationsIds.Definitions.Skills)
        {
            InitializeProperties();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SkillsInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="SkillsInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public SkillsInstance(DomInstance domInstance): base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcPeople_OrganizationsIds.Definitions.Skills))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcPeople_OrganizationsIds.Definitions.Skills)}'", nameof(domInstance));
            InitializeProperties();
        }

        /// <summary>
        /// Gets or sets the SkillInformation section of the DOM Instance.
        /// </summary>
        public SkillInformationSection SkillInformation
        {
            get;
            set;
        }

        public static explicit operator SkillsInstance(DomInstance instance)
        {
            return new SkillsInstance(instance);
        }

        /// <inheritdoc />
        public override DomInstance ToInstance()
        {
            domInstance.Sections.Clear();
            domInstance.Sections.Add(SkillInformation.ToSection());
            return domInstance;
        }

        /// <inheritdoc />
        public override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected override void InitializeProperties()
        {
            SkillInformation = new SkillInformationSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.SkillInformation.Id)));
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a CategoryInstance DOM instance.
    /// The <see cref="CategoryInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class CategoryInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryInstance"/> class. Creates an empty <see cref="CategoryInstance"/> instance with default settings.
        /// </summary>
        public CategoryInstance(): base(SlcPeople_OrganizationsIds.Definitions.Category)
        {
            InitializeProperties();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="CategoryInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public CategoryInstance(DomInstance domInstance): base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcPeople_OrganizationsIds.Definitions.Category))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcPeople_OrganizationsIds.Definitions.Category)}'", nameof(domInstance));
            InitializeProperties();
        }

        /// <summary>
        /// Gets or sets the CategoryInformation section of the DOM Instance.
        /// </summary>
        public CategoryInformationSection CategoryInformation
        {
            get;
            set;
        }

        public static explicit operator CategoryInstance(DomInstance instance)
        {
            return new CategoryInstance(instance);
        }

        /// <inheritdoc />
        public override DomInstance ToInstance()
        {
            domInstance.Sections.Clear();
            domInstance.Sections.Add(CategoryInformation.ToSection());
            return domInstance;
        }

        /// <inheritdoc />
        public override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected override void InitializeProperties()
        {
            CategoryInformation = new CategoryInformationSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.CategoryInformation.Id)));
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a RoleInstance DOM instance.
    /// The <see cref="RoleInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class RoleInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RoleInstance"/> class. Creates an empty <see cref="RoleInstance"/> instance with default settings.
        /// </summary>
        public RoleInstance(): base(SlcPeople_OrganizationsIds.Definitions.Role)
        {
            InitializeProperties();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RoleInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="RoleInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public RoleInstance(DomInstance domInstance): base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcPeople_OrganizationsIds.Definitions.Role))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcPeople_OrganizationsIds.Definitions.Role)}'", nameof(domInstance));
            InitializeProperties();
        }

        /// <summary>
        /// Gets or sets the RoleInformation section of the DOM Instance.
        /// </summary>
        public RoleInformationSection RoleInformation
        {
            get;
            set;
        }

        public static explicit operator RoleInstance(DomInstance instance)
        {
            return new RoleInstance(instance);
        }

        /// <inheritdoc />
        public override DomInstance ToInstance()
        {
            domInstance.Sections.Clear();
            domInstance.Sections.Add(RoleInformation.ToSection());
            return domInstance;
        }

        /// <inheritdoc />
        public override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected override void InitializeProperties()
        {
            RoleInformation = new RoleInformationSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.RoleInformation.Id)));
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a ExpertisesInstance DOM instance.
    /// The <see cref="ExpertisesInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class ExpertisesInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpertisesInstance"/> class. Creates an empty <see cref="ExpertisesInstance"/> instance with default settings.
        /// </summary>
        public ExpertisesInstance(): base(SlcPeople_OrganizationsIds.Definitions.Expertises)
        {
            InitializeProperties();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExpertisesInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="ExpertisesInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public ExpertisesInstance(DomInstance domInstance): base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcPeople_OrganizationsIds.Definitions.Expertises))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcPeople_OrganizationsIds.Definitions.Expertises)}'", nameof(domInstance));
            InitializeProperties();
        }

        /// <summary>
        /// Gets or sets the ExpertiseInformation section of the DOM Instance.
        /// </summary>
        public ExpertiseInformationSection ExpertiseInformation
        {
            get;
            set;
        }

        public static explicit operator ExpertisesInstance(DomInstance instance)
        {
            return new ExpertisesInstance(instance);
        }

        /// <inheritdoc />
        public override DomInstance ToInstance()
        {
            domInstance.Sections.Clear();
            domInstance.Sections.Add(ExpertiseInformation.ToSection());
            return domInstance;
        }

        /// <inheritdoc />
        public override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected override void InitializeProperties()
        {
            ExpertiseInformation = new ExpertiseInformationSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.ExpertiseInformation.Id)));
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a PeopleInstance DOM instance.
    /// The <see cref="PeopleInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class PeopleInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleInstance"/> class. Creates an empty <see cref="PeopleInstance"/> instance with default settings.
        /// </summary>
        public PeopleInstance(): base(SlcPeople_OrganizationsIds.Definitions.People)
        {
            InitializeProperties();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="PeopleInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public PeopleInstance(DomInstance domInstance): base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcPeople_OrganizationsIds.Definitions.People))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcPeople_OrganizationsIds.Definitions.People)}'", nameof(domInstance));
            InitializeProperties();
        }

        /// <summary>
        /// Gets or sets the Organization section of the DOM Instance.
        /// </summary>
        public OrganizationSection Organization
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the ContactInfo section of the DOM Instance.
        /// </summary>
        public ContactInfoSection ContactInfo
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the Team section of the DOM Instance.
        /// </summary>
        public IList<TeamSection> Team
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets or sets the Resource section of the DOM Instance.
        /// </summary>
        public ResourceSection Resource
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the PeopleInformation section of the DOM Instance.
        /// </summary>
        public PeopleInformationSection PeopleInformation
        {
            get;
            set;
        }

        public static explicit operator PeopleInstance(DomInstance instance)
        {
            return new PeopleInstance(instance);
        }

        /// <inheritdoc />
        public override DomInstance ToInstance()
        {
            domInstance.Sections.Clear();
            domInstance.Sections.Add(Organization.ToSection());
            domInstance.Sections.Add(ContactInfo.ToSection());
            foreach (var item in Team)
            {
                domInstance.Sections.Add(item.ToSection());
            }

            domInstance.Sections.Add(Resource.ToSection());
            domInstance.Sections.Add(PeopleInformation.ToSection());
            return domInstance;
        }

        /// <inheritdoc />
        public override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected override void InitializeProperties()
        {
            Organization = new OrganizationSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.Organization.Id)));
            ContactInfo = new ContactInfoSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.ContactInfo.Id)));
            Team = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.Team.Id)).Select(section => new TeamSection(section)).ToList();
            Resource = new ResourceSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.Resource.Id)));
            PeopleInformation = new PeopleInformationSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.PeopleInformation.Id)));
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a TeamsInstance DOM instance.
    /// The <see cref="TeamsInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class TeamsInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsInstance"/> class. Creates an empty <see cref="TeamsInstance"/> instance with default settings.
        /// </summary>
        public TeamsInstance(): base(SlcPeople_OrganizationsIds.Definitions.Teams)
        {
            InitializeProperties();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="TeamsInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public TeamsInstance(DomInstance domInstance): base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcPeople_OrganizationsIds.Definitions.Teams))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcPeople_OrganizationsIds.Definitions.Teams)}'", nameof(domInstance));
            InitializeProperties();
        }

        /// <summary>
        /// Gets or sets the Collaboration section of the DOM Instance.
        /// </summary>
        public CollaborationSection Collaboration
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the ResourcePool section of the DOM Instance.
        /// </summary>
        public ResourcePoolSection ResourcePool
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the TeamInformation section of the DOM Instance.
        /// </summary>
        public TeamInformationSection TeamInformation
        {
            get;
            set;
        }

        public static explicit operator TeamsInstance(DomInstance instance)
        {
            return new TeamsInstance(instance);
        }

        /// <inheritdoc />
        public override DomInstance ToInstance()
        {
            domInstance.Sections.Clear();
            domInstance.Sections.Add(Collaboration.ToSection());
            domInstance.Sections.Add(ResourcePool.ToSection());
            domInstance.Sections.Add(TeamInformation.ToSection());
            return domInstance;
        }

        /// <inheritdoc />
        public override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected override void InitializeProperties()
        {
            Collaboration = new CollaborationSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.Collaboration.Id)));
            ResourcePool = new ResourcePoolSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.ResourcePool.Id)));
            TeamInformation = new TeamInformationSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.TeamInformation.Id)));
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a OrganizationsInstance DOM instance.
    /// The <see cref="OrganizationsInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class OrganizationsInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsInstance"/> class. Creates an empty <see cref="OrganizationsInstance"/> instance with default settings.
        /// </summary>
        public OrganizationsInstance(): base(SlcPeople_OrganizationsIds.Definitions.Organizations)
        {
            InitializeProperties();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="OrganizationsInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public OrganizationsInstance(DomInstance domInstance): base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcPeople_OrganizationsIds.Definitions.Organizations))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcPeople_OrganizationsIds.Definitions.Organizations)}'", nameof(domInstance));
            InitializeProperties();
        }

        /// <summary>
        /// Gets or sets the Contracts section of the DOM Instance.
        /// </summary>
        public IList<ContractsSection> Contracts
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets or sets the OrganizationInformation section of the DOM Instance.
        /// </summary>
        public OrganizationInformationSection OrganizationInformation
        {
            get;
            set;
        }

        public static explicit operator OrganizationsInstance(DomInstance instance)
        {
            return new OrganizationsInstance(instance);
        }

        /// <inheritdoc />
        public override DomInstance ToInstance()
        {
            domInstance.Sections.Clear();
            foreach (var item in Contracts)
            {
                domInstance.Sections.Add(item.ToSection());
            }

            domInstance.Sections.Add(OrganizationInformation.ToSection());
            return domInstance;
        }

        /// <inheritdoc />
        public override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected override void InitializeProperties()
        {
            Contracts = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.Contracts.Id)).Select(section => new ContractsSection(section)).ToList();
            OrganizationInformation = new OrganizationInformationSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.OrganizationInformation.Id)));
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DOM Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.SlcPeople_Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
    using Skyline.DataMiner.Net.Apps.Sections.Sections;
    using Skyline.DataMiner.Net.Messages;
    using Skyline.DataMiner.Net.Sections;

    /// <summary>
    /// Represents a wrapper class for accessing a ExpertiseInformationSection section.
    /// The <see cref="ExpertiseInformationSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class ExpertiseInformationSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpertiseInformationSection"/> class. Creates an empty <see cref="ExpertiseInformationSection"/> object with default settings.
        /// </summary>
        public ExpertiseInformationSection(): base(SlcPeople_OrganizationsIds.Sections.ExpertiseInformation.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExpertiseInformationSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="ExpertiseInformationSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public ExpertiseInformationSection(Section section): base(SlcPeople_OrganizationsIds.Sections.ExpertiseInformation.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.ExpertiseInformation.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcPeople_OrganizationsIds.Sections.ExpertiseInformation.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the Expertise field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String Expertise
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.ExpertiseInformation.Expertise);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.ExpertiseInformation.Expertise);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.ExpertiseInformation.Expertise, (String)value);
                }
            }
        }

        /// <inheritdoc />
        public override Section ToSection()
        {
            if (section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.ExpertiseInformation.Expertise) == null)
                throw new InvalidOperationException("'Expertise' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a ContractsSection section.
    /// The <see cref="ContractsSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class ContractsSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractsSection"/> class. Creates an empty <see cref="ContractsSection"/> object with default settings.
        /// </summary>
        public ContractsSection(): base(SlcPeople_OrganizationsIds.Sections.Contracts.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractsSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="ContractsSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public ContractsSection(Section section): base(SlcPeople_OrganizationsIds.Sections.Contracts.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.Contracts.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcPeople_OrganizationsIds.Sections.Contracts.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the Contract field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? Contract
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcPeople_OrganizationsIds.Sections.Contracts.Contract);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.Contracts.Contract);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.Contracts.Contract, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the BillTo field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? BillTo
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcPeople_OrganizationsIds.Sections.Contracts.BillTo);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.Contracts.BillTo);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.Contracts.BillTo, (Guid)value);
                }
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a CollaborationSection section.
    /// The <see cref="CollaborationSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class CollaborationSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CollaborationSection"/> class. Creates an empty <see cref="CollaborationSection"/> object with default settings.
        /// </summary>
        public CollaborationSection(): base(SlcPeople_OrganizationsIds.Sections.Collaboration.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollaborationSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="CollaborationSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public CollaborationSection(Section section): base(SlcPeople_OrganizationsIds.Sections.Collaboration.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.Collaboration.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcPeople_OrganizationsIds.Sections.Collaboration.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the CreateMSTeamsChannel field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Boolean? CreateMSTeamsChannel
        {
            get
            {
                var wrapper = section.GetValue<Boolean>(SlcPeople_OrganizationsIds.Sections.Collaboration.CreateMSTeamsChannel);
                if (wrapper != null)
                {
                    return (Boolean? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.Collaboration.CreateMSTeamsChannel);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.Collaboration.CreateMSTeamsChannel, (Boolean)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the CreateMSTeam field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Boolean? CreateMSTeam
        {
            get
            {
                var wrapper = section.GetValue<Boolean>(SlcPeople_OrganizationsIds.Sections.Collaboration.CreateMSTeam);
                if (wrapper != null)
                {
                    return (Boolean? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.Collaboration.CreateMSTeam);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.Collaboration.CreateMSTeam, (Boolean)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the MSTeamName field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String MSTeamName
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.Collaboration.MSTeamName);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.Collaboration.MSTeamName);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.Collaboration.MSTeamName, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ChannelId field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String ChannelId
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.Collaboration.ChannelId);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.Collaboration.ChannelId);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.Collaboration.ChannelId, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TeamId field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String TeamId
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.Collaboration.TeamId);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.Collaboration.TeamId);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.Collaboration.TeamId, (String)value);
                }
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a OrganizationSection section.
    /// The <see cref="OrganizationSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class OrganizationSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationSection"/> class. Creates an empty <see cref="OrganizationSection"/> object with default settings.
        /// </summary>
        public OrganizationSection(): base(SlcPeople_OrganizationsIds.Sections.Organization.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="OrganizationSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public OrganizationSection(Section section): base(SlcPeople_OrganizationsIds.Sections.Organization.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.Organization.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcPeople_OrganizationsIds.Sections.Organization.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the Organization_57695f03 field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? Organization_57695f03
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcPeople_OrganizationsIds.Sections.Organization.Organization_57695f03);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.Organization.Organization_57695f03);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.Organization.Organization_57695f03, (Guid)value);
                }
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a SkillInformationSection section.
    /// The <see cref="SkillInformationSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class SkillInformationSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SkillInformationSection"/> class. Creates an empty <see cref="SkillInformationSection"/> object with default settings.
        /// </summary>
        public SkillInformationSection(): base(SlcPeople_OrganizationsIds.Sections.SkillInformation.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SkillInformationSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="SkillInformationSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public SkillInformationSection(Section section): base(SlcPeople_OrganizationsIds.Sections.SkillInformation.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.SkillInformation.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcPeople_OrganizationsIds.Sections.SkillInformation.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the Skill field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String Skill
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.SkillInformation.Skill);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.SkillInformation.Skill);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.SkillInformation.Skill, (String)value);
                }
            }
        }

        /// <inheritdoc />
        public override Section ToSection()
        {
            if (section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.SkillInformation.Skill) == null)
                throw new InvalidOperationException("'Skill' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a RoleInformationSection section.
    /// The <see cref="RoleInformationSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class RoleInformationSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RoleInformationSection"/> class. Creates an empty <see cref="RoleInformationSection"/> object with default settings.
        /// </summary>
        public RoleInformationSection(): base(SlcPeople_OrganizationsIds.Sections.RoleInformation.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RoleInformationSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="RoleInformationSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public RoleInformationSection(Section section): base(SlcPeople_OrganizationsIds.Sections.RoleInformation.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.RoleInformation.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcPeople_OrganizationsIds.Sections.RoleInformation.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the Role field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String Role
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.RoleInformation.Role);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.RoleInformation.Role);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.RoleInformation.Role, (String)value);
                }
            }
        }

        /// <inheritdoc />
        public override Section ToSection()
        {
            if (section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.RoleInformation.Role) == null)
                throw new InvalidOperationException("'Role' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a ResourcePoolSection section.
    /// The <see cref="ResourcePoolSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class ResourcePoolSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourcePoolSection"/> class. Creates an empty <see cref="ResourcePoolSection"/> object with default settings.
        /// </summary>
        public ResourcePoolSection(): base(SlcPeople_OrganizationsIds.Sections.ResourcePool.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResourcePoolSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="ResourcePoolSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public ResourcePoolSection(Section section): base(SlcPeople_OrganizationsIds.Sections.ResourcePool.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.ResourcePool.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcPeople_OrganizationsIds.Sections.ResourcePool.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the LinkedResourcePool field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? LinkedResourcePool
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcPeople_OrganizationsIds.Sections.ResourcePool.LinkedResourcePool);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.ResourcePool.LinkedResourcePool);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.ResourcePool.LinkedResourcePool, (Guid)value);
                }
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a ContactInfoSection section.
    /// The <see cref="ContactInfoSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class ContactInfoSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactInfoSection"/> class. Creates an empty <see cref="ContactInfoSection"/> object with default settings.
        /// </summary>
        public ContactInfoSection(): base(SlcPeople_OrganizationsIds.Sections.ContactInfo.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactInfoSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="ContactInfoSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public ContactInfoSection(Section section): base(SlcPeople_OrganizationsIds.Sections.ContactInfo.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.ContactInfo.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcPeople_OrganizationsIds.Sections.ContactInfo.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the Email field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String Email
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.ContactInfo.Email);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.ContactInfo.Email);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.ContactInfo.Email, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Phone field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String Phone
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.ContactInfo.Phone);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.ContactInfo.Phone);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.ContactInfo.Phone, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the StreetAddress field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String StreetAddress
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.ContactInfo.StreetAddress);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.ContactInfo.StreetAddress);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.ContactInfo.StreetAddress, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the City field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String City
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.ContactInfo.City);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.ContactInfo.City);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.ContactInfo.City, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Country field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcPeople_OrganizationsIds.Enums.Country_1ace7be9? Country
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcPeople_OrganizationsIds.Sections.ContactInfo.Country);
                if (wrapper != null)
                {
                    return (SlcPeople_OrganizationsIds.Enums.Country_1ace7be9? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.ContactInfo.Country);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.ContactInfo.Country, (Int32)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ZIP field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String ZIP
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.ContactInfo.ZIP);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.ContactInfo.ZIP);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.ContactInfo.ZIP, (String)value);
                }
            }
        }

        /// <inheritdoc />
        public override Section ToSection()
        {
            if (section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.ContactInfo.Email) == null)
                throw new InvalidOperationException("'Email' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            if (section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.ContactInfo.Phone) == null)
                throw new InvalidOperationException("'Phone' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            if (section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.ContactInfo.StreetAddress) == null)
                throw new InvalidOperationException("'StreetAddress' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            if (section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.ContactInfo.City) == null)
                throw new InvalidOperationException("'City' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            if (section.GetValue<Int32>(SlcPeople_OrganizationsIds.Sections.ContactInfo.Country) == null)
                throw new InvalidOperationException("'Country' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            if (section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.ContactInfo.ZIP) == null)
                throw new InvalidOperationException("'ZIP' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a ExperienceInformationSection section.
    /// The <see cref="ExperienceInformationSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class ExperienceInformationSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExperienceInformationSection"/> class. Creates an empty <see cref="ExperienceInformationSection"/> object with default settings.
        /// </summary>
        public ExperienceInformationSection(): base(SlcPeople_OrganizationsIds.Sections.ExperienceInformation.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExperienceInformationSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="ExperienceInformationSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public ExperienceInformationSection(Section section): base(SlcPeople_OrganizationsIds.Sections.ExperienceInformation.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.ExperienceInformation.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcPeople_OrganizationsIds.Sections.ExperienceInformation.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the Experience field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String Experience
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.ExperienceInformation.Experience);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.ExperienceInformation.Experience);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.ExperienceInformation.Experience, (String)value);
                }
            }
        }

        /// <inheritdoc />
        public override Section ToSection()
        {
            if (section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.ExperienceInformation.Experience) == null)
                throw new InvalidOperationException("'Experience' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a CategoryInformationSection section.
    /// The <see cref="CategoryInformationSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class CategoryInformationSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryInformationSection"/> class. Creates an empty <see cref="CategoryInformationSection"/> object with default settings.
        /// </summary>
        public CategoryInformationSection(): base(SlcPeople_OrganizationsIds.Sections.CategoryInformation.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryInformationSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="CategoryInformationSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public CategoryInformationSection(Section section): base(SlcPeople_OrganizationsIds.Sections.CategoryInformation.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.CategoryInformation.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcPeople_OrganizationsIds.Sections.CategoryInformation.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the Category field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String Category
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.CategoryInformation.Category);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.CategoryInformation.Category);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.CategoryInformation.Category, (String)value);
                }
            }
        }

        /// <inheritdoc />
        public override Section ToSection()
        {
            if (section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.CategoryInformation.Category) == null)
                throw new InvalidOperationException("'Category' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a TeamSection section.
    /// The <see cref="TeamSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class TeamSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamSection"/> class. Creates an empty <see cref="TeamSection"/> object with default settings.
        /// </summary>
        public TeamSection(): base(SlcPeople_OrganizationsIds.Sections.Team.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="TeamSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public TeamSection(Section section): base(SlcPeople_OrganizationsIds.Sections.Team.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.Team.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcPeople_OrganizationsIds.Sections.Team.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the Team_144d3379 field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? Team_144d3379
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcPeople_OrganizationsIds.Sections.Team.Team_144d3379);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.Team.Team_144d3379);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.Team.Team_144d3379, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TeamRole field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? TeamRole
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcPeople_OrganizationsIds.Sections.Team.TeamRole);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.Team.TeamRole);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.Team.TeamRole, (Guid)value);
                }
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a OrganizationInformationSection section.
    /// The <see cref="OrganizationInformationSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class OrganizationInformationSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationInformationSection"/> class. Creates an empty <see cref="OrganizationInformationSection"/> object with default settings.
        /// </summary>
        public OrganizationInformationSection(): base(SlcPeople_OrganizationsIds.Sections.OrganizationInformation.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationInformationSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="OrganizationInformationSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public OrganizationInformationSection(Section section): base(SlcPeople_OrganizationsIds.Sections.OrganizationInformation.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.OrganizationInformation.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcPeople_OrganizationsIds.Sections.OrganizationInformation.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the OrganizationName field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String OrganizationName
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.OrganizationInformation.OrganizationName);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.OrganizationInformation.OrganizationName);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.OrganizationInformation.OrganizationName, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Category field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? Category
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcPeople_OrganizationsIds.Sections.OrganizationInformation.Category);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.OrganizationInformation.Category);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.OrganizationInformation.Category, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Icon field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String Icon
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.OrganizationInformation.Icon);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.OrganizationInformation.Icon);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.OrganizationInformation.Icon, (String)value);
                }
            }
        }

        /// <inheritdoc />
        public override Section ToSection()
        {
            if (section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.OrganizationInformation.OrganizationName) == null)
                throw new InvalidOperationException("'OrganizationName' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            if (section.GetValue<Guid>(SlcPeople_OrganizationsIds.Sections.OrganizationInformation.Category) == null)
                throw new InvalidOperationException("'Category' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a TeamInformationSection section.
    /// The <see cref="TeamInformationSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class TeamInformationSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamInformationSection"/> class. Creates an empty <see cref="TeamInformationSection"/> object with default settings.
        /// </summary>
        public TeamInformationSection(): base(SlcPeople_OrganizationsIds.Sections.TeamInformation.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamInformationSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="TeamInformationSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public TeamInformationSection(Section section): base(SlcPeople_OrganizationsIds.Sections.TeamInformation.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.TeamInformation.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcPeople_OrganizationsIds.Sections.TeamInformation.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the TeamName field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String TeamName
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.TeamInformation.TeamName);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.TeamInformation.TeamName);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.TeamInformation.TeamName, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TeamEmail field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String TeamEmail
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.TeamInformation.TeamEmail);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.TeamInformation.TeamEmail);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.TeamInformation.TeamEmail, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TeamDescription field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String TeamDescription
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.TeamInformation.TeamDescription);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.TeamInformation.TeamDescription);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.TeamInformation.TeamDescription, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TeamExpertiseS field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? TeamExpertiseS
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcPeople_OrganizationsIds.Sections.TeamInformation.TeamExpertiseS);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.TeamInformation.TeamExpertiseS);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.TeamInformation.TeamExpertiseS, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Bookable field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Boolean? Bookable
        {
            get
            {
                var wrapper = section.GetValue<Boolean>(SlcPeople_OrganizationsIds.Sections.TeamInformation.Bookable);
                if (wrapper != null)
                {
                    return (Boolean? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.TeamInformation.Bookable);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.TeamInformation.Bookable, (Boolean)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Icon field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String Icon
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.TeamInformation.Icon);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.TeamInformation.Icon);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.TeamInformation.Icon, (String)value);
                }
            }
        }

        /// <inheritdoc />
        public override Section ToSection()
        {
            if (section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.TeamInformation.TeamName) == null)
                throw new InvalidOperationException("'TeamName' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a ResourceSection section.
    /// The <see cref="ResourceSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class ResourceSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceSection"/> class. Creates an empty <see cref="ResourceSection"/> object with default settings.
        /// </summary>
        public ResourceSection(): base(SlcPeople_OrganizationsIds.Sections.Resource.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="ResourceSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public ResourceSection(Section section): base(SlcPeople_OrganizationsIds.Sections.Resource.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.Resource.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcPeople_OrganizationsIds.Sections.Resource.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the LinkedResource field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? LinkedResource
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcPeople_OrganizationsIds.Sections.Resource.LinkedResource);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.Resource.LinkedResource);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.Resource.LinkedResource, (Guid)value);
                }
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a BillingSection section.
    /// The <see cref="BillingSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class BillingSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingSection"/> class. Creates an empty <see cref="BillingSection"/> object with default settings.
        /// </summary>
        public BillingSection(): base(SlcPeople_OrganizationsIds.Sections.Billing.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="BillingSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public BillingSection(Section section): base(SlcPeople_OrganizationsIds.Sections.Billing.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.Billing.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcPeople_OrganizationsIds.Sections.Billing.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the Email field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String Email
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.Billing.Email);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.Billing.Email);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.Billing.Email, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Phone field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String Phone
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.Billing.Phone);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.Billing.Phone);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.Billing.Phone, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the StreetAddress field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String StreetAddress
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.Billing.StreetAddress);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.Billing.StreetAddress);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.Billing.StreetAddress, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the City field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String City
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.Billing.City);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.Billing.City);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.Billing.City, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Zip field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Int64? Zip
        {
            get
            {
                var wrapper = section.GetValue<Int64>(SlcPeople_OrganizationsIds.Sections.Billing.Zip);
                if (wrapper != null)
                {
                    return (Int64? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.Billing.Zip);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.Billing.Zip, (Int64)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Country field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcPeople_OrganizationsIds.Enums.Country_7f58452b? Country
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcPeople_OrganizationsIds.Sections.Billing.Country);
                if (wrapper != null)
                {
                    return (SlcPeople_OrganizationsIds.Enums.Country_7f58452b? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.Billing.Country);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.Billing.Country, (Int32)value);
                }
            }
        }

        /// <inheritdoc />
        public override Section ToSection()
        {
            if (section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.Billing.Email) == null)
                throw new InvalidOperationException("'Email' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a PeopleInformationSection section.
    /// The <see cref="PeopleInformationSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class PeopleInformationSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleInformationSection"/> class. Creates an empty <see cref="PeopleInformationSection"/> object with default settings.
        /// </summary>
        public PeopleInformationSection(): base(SlcPeople_OrganizationsIds.Sections.PeopleInformation.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleInformationSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="PeopleInformationSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public PeopleInformationSection(Section section): base(SlcPeople_OrganizationsIds.Sections.PeopleInformation.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcPeople_OrganizationsIds.Sections.PeopleInformation.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcPeople_OrganizationsIds.Sections.PeopleInformation.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the FullName field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String FullName
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.PeopleInformation.FullName);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.PeopleInformation.FullName);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.PeopleInformation.FullName, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the PersonalSkills field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? PersonalSkills
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcPeople_OrganizationsIds.Sections.PeopleInformation.PersonalSkills);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.PeopleInformation.PersonalSkills);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.PeopleInformation.PersonalSkills, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ExperienceLevel field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? ExperienceLevel
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcPeople_OrganizationsIds.Sections.PeopleInformation.ExperienceLevel);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.PeopleInformation.ExperienceLevel);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.PeopleInformation.ExperienceLevel, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ProfileImage field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String ProfileImage
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.PeopleInformation.ProfileImage);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPeople_OrganizationsIds.Sections.PeopleInformation.ProfileImage);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPeople_OrganizationsIds.Sections.PeopleInformation.ProfileImage, (String)value);
                }
            }
        }

        /// <inheritdoc />
        public override Section ToSection()
        {
            if (section.GetValue<String>(SlcPeople_OrganizationsIds.Sections.PeopleInformation.FullName) == null)
                throw new InvalidOperationException("'FullName' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            if (section.GetValue<Guid>(SlcPeople_OrganizationsIds.Sections.PeopleInformation.PersonalSkills) == null)
                throw new InvalidOperationException("'PersonalSkills' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            if (section.GetValue<Guid>(SlcPeople_OrganizationsIds.Sections.PeopleInformation.ExperienceLevel) == null)
                throw new InvalidOperationException("'ExperienceLevel' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }
}
